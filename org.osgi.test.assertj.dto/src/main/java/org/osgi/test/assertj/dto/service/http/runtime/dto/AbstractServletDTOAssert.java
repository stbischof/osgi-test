package org.osgi.test.assertj.dto.service.http.runtime.dto;

import org.assertj.core.api.Assertions;
import org.osgi.service.http.runtime.dto.ServletDTO;

/**
 * Abstract base class for {@link ServletDTO} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractServletDTOAssert<S extends AbstractServletDTOAssert<S, A>, A extends ServletDTO> extends AbstractBaseServletDTOAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractServletDTOAssert}</code> to make assertions on actual ServletDTO.
   * @param actual the ServletDTO we want to make assertions on.
   */
  protected AbstractServletDTOAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual ServletDTO's patterns contains the given String elements.
   * @param patterns the given elements that should be contained in actual ServletDTO's patterns.
   * @return this assertion object.
   * @throws AssertionError if the actual ServletDTO's patterns does not contain all given String elements.
   */
  public S hasPatterns(String... patterns) {
    // check that actual ServletDTO we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (patterns == null) failWithMessage("Expecting patterns parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.patterns).contains(patterns);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ServletDTO's patterns contains <b>only</b> the given String elements and nothing else in whatever order.
   *
   * @param patterns the given elements that should be contained in actual ServletDTO's patterns.
   * @return this assertion object.
   * @throws AssertionError if the actual ServletDTO's patterns does not contain all given String elements and nothing else.
   */
  public S hasOnlyPatterns(String... patterns) {
    // check that actual ServletDTO we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (patterns == null) failWithMessage("Expecting patterns parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.patterns).containsOnly(patterns);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ServletDTO's patterns does not contain the given String elements.
   *
   * @param patterns the given elements that should not be in actual ServletDTO's patterns.
   * @return this assertion object.
   * @throws AssertionError if the actual ServletDTO's patterns contains any given String elements.
   */
  public S doesNotHavePatterns(String... patterns) {
    // check that actual ServletDTO we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (patterns == null) failWithMessage("Expecting patterns parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.patterns).doesNotContain(patterns);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ServletDTO has no patterns.
   * @return this assertion object.
   * @throws AssertionError if the actual ServletDTO's patterns is not empty.
   */
  public S hasNoPatterns() {
    // check that actual ServletDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have patterns but had :\n  <%s>";

    // check that it is not empty
    if (actual.patterns.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.patterns));
    }

    // return the current assertion for method chaining
    return myself;
  }


}
