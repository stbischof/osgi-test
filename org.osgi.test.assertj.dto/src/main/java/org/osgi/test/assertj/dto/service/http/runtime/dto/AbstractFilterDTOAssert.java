package org.osgi.test.assertj.dto.service.http.runtime.dto;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.api.Assertions;
import org.assertj.core.util.Objects;
import org.osgi.service.http.runtime.dto.FilterDTO;

/**
 * Abstract base class for {@link FilterDTO} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractFilterDTOAssert<S extends AbstractFilterDTOAssert<S, A>, A extends FilterDTO> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractFilterDTOAssert}</code> to make assertions on actual FilterDTO.
   * @param actual the FilterDTO we want to make assertions on.
   */
  protected AbstractFilterDTOAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual FilterDTO is asyncSupported.
   * @return this assertion object.
   * @throws AssertionError - if the actual FilterDTO is not asyncSupported.
   */
  public S isAsyncSupported() {
    // check that actual FilterDTO we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.asyncSupported) {
      failWithMessage("\nExpecting that actual FilterDTO is asyncSupported but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual FilterDTO is not asyncSupported.
   * @return this assertion object.
   * @throws AssertionError - if the actual FilterDTO is asyncSupported.
   */
  public S isNotAsyncSupported() {
    // check that actual FilterDTO we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.asyncSupported) {
      failWithMessage("\nExpecting that actual FilterDTO is not asyncSupported but is.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual FilterDTO's dispatcher contains the given String elements.
   * @param dispatcher the given elements that should be contained in actual FilterDTO's dispatcher.
   * @return this assertion object.
   * @throws AssertionError if the actual FilterDTO's dispatcher does not contain all given String elements.
   */
  public S hasDispatcher(String... dispatcher) {
    // check that actual FilterDTO we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (dispatcher == null) failWithMessage("Expecting dispatcher parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.dispatcher).contains(dispatcher);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual FilterDTO's dispatcher contains <b>only</b> the given String elements and nothing else in whatever order.
   *
   * @param dispatcher the given elements that should be contained in actual FilterDTO's dispatcher.
   * @return this assertion object.
   * @throws AssertionError if the actual FilterDTO's dispatcher does not contain all given String elements and nothing else.
   */
  public S hasOnlyDispatcher(String... dispatcher) {
    // check that actual FilterDTO we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (dispatcher == null) failWithMessage("Expecting dispatcher parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.dispatcher).containsOnly(dispatcher);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual FilterDTO's dispatcher does not contain the given String elements.
   *
   * @param dispatcher the given elements that should not be in actual FilterDTO's dispatcher.
   * @return this assertion object.
   * @throws AssertionError if the actual FilterDTO's dispatcher contains any given String elements.
   */
  public S doesNotHaveDispatcher(String... dispatcher) {
    // check that actual FilterDTO we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (dispatcher == null) failWithMessage("Expecting dispatcher parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.dispatcher).doesNotContain(dispatcher);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual FilterDTO has no dispatcher.
   * @return this assertion object.
   * @throws AssertionError if the actual FilterDTO's dispatcher is not empty.
   */
  public S hasNoDispatcher() {
    // check that actual FilterDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have dispatcher but had :\n  <%s>";

    // check that it is not empty
    if (actual.dispatcher.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.dispatcher));
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual FilterDTO's initParams is equal to the given one.
   * @param initParams the given initParams to compare the actual FilterDTO's initParams to.
   * @return this assertion object.
   * @throws AssertionError - if the actual FilterDTO's initParams is not equal to the given one.
   */
  public S hasInitParams(java.util.Map initParams) {
    // check that actual FilterDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting initParams of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Map actualInitParams = actual.initParams;
    if (!Objects.areEqual(actualInitParams, initParams)) {
      failWithMessage(assertjErrorMessage, actual, initParams, actualInitParams);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual FilterDTO's name is equal to the given one.
   * @param name the given name to compare the actual FilterDTO's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual FilterDTO's name is not equal to the given one.
   */
  public S hasName(String name) {
    // check that actual FilterDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualName = actual.name;
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual FilterDTO's patterns contains the given String elements.
   * @param patterns the given elements that should be contained in actual FilterDTO's patterns.
   * @return this assertion object.
   * @throws AssertionError if the actual FilterDTO's patterns does not contain all given String elements.
   */
  public S hasPatterns(String... patterns) {
    // check that actual FilterDTO we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (patterns == null) failWithMessage("Expecting patterns parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.patterns).contains(patterns);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual FilterDTO's patterns contains <b>only</b> the given String elements and nothing else in whatever order.
   *
   * @param patterns the given elements that should be contained in actual FilterDTO's patterns.
   * @return this assertion object.
   * @throws AssertionError if the actual FilterDTO's patterns does not contain all given String elements and nothing else.
   */
  public S hasOnlyPatterns(String... patterns) {
    // check that actual FilterDTO we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (patterns == null) failWithMessage("Expecting patterns parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.patterns).containsOnly(patterns);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual FilterDTO's patterns does not contain the given String elements.
   *
   * @param patterns the given elements that should not be in actual FilterDTO's patterns.
   * @return this assertion object.
   * @throws AssertionError if the actual FilterDTO's patterns contains any given String elements.
   */
  public S doesNotHavePatterns(String... patterns) {
    // check that actual FilterDTO we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (patterns == null) failWithMessage("Expecting patterns parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.patterns).doesNotContain(patterns);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual FilterDTO has no patterns.
   * @return this assertion object.
   * @throws AssertionError if the actual FilterDTO's patterns is not empty.
   */
  public S hasNoPatterns() {
    // check that actual FilterDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have patterns but had :\n  <%s>";

    // check that it is not empty
    if (actual.patterns.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.patterns));
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual FilterDTO's regexs contains the given String elements.
   * @param regexs the given elements that should be contained in actual FilterDTO's regexs.
   * @return this assertion object.
   * @throws AssertionError if the actual FilterDTO's regexs does not contain all given String elements.
   */
  public S hasRegexs(String... regexs) {
    // check that actual FilterDTO we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (regexs == null) failWithMessage("Expecting regexs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.regexs).contains(regexs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual FilterDTO's regexs contains <b>only</b> the given String elements and nothing else in whatever order.
   *
   * @param regexs the given elements that should be contained in actual FilterDTO's regexs.
   * @return this assertion object.
   * @throws AssertionError if the actual FilterDTO's regexs does not contain all given String elements and nothing else.
   */
  public S hasOnlyRegexs(String... regexs) {
    // check that actual FilterDTO we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (regexs == null) failWithMessage("Expecting regexs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.regexs).containsOnly(regexs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual FilterDTO's regexs does not contain the given String elements.
   *
   * @param regexs the given elements that should not be in actual FilterDTO's regexs.
   * @return this assertion object.
   * @throws AssertionError if the actual FilterDTO's regexs contains any given String elements.
   */
  public S doesNotHaveRegexs(String... regexs) {
    // check that actual FilterDTO we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (regexs == null) failWithMessage("Expecting regexs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.regexs).doesNotContain(regexs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual FilterDTO has no regexs.
   * @return this assertion object.
   * @throws AssertionError if the actual FilterDTO's regexs is not empty.
   */
  public S hasNoRegexs() {
    // check that actual FilterDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have regexs but had :\n  <%s>";

    // check that it is not empty
    if (actual.regexs.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.regexs));
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual FilterDTO's serviceId is equal to the given one.
   * @param serviceId the given serviceId to compare the actual FilterDTO's serviceId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual FilterDTO's serviceId is not equal to the given one.
   */
  public S hasServiceId(long serviceId) {
    // check that actual FilterDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting serviceId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    long actualServiceId = actual.serviceId;
    if (actualServiceId != serviceId) {
      failWithMessage(assertjErrorMessage, actual, serviceId, actualServiceId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual FilterDTO's servletContextId is equal to the given one.
   * @param servletContextId the given servletContextId to compare the actual FilterDTO's servletContextId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual FilterDTO's servletContextId is not equal to the given one.
   */
  public S hasServletContextId(long servletContextId) {
    // check that actual FilterDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting servletContextId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    long actualServletContextId = actual.servletContextId;
    if (actualServletContextId != servletContextId) {
      failWithMessage(assertjErrorMessage, actual, servletContextId, actualServletContextId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual FilterDTO's servletNames contains the given String elements.
   * @param servletNames the given elements that should be contained in actual FilterDTO's servletNames.
   * @return this assertion object.
   * @throws AssertionError if the actual FilterDTO's servletNames does not contain all given String elements.
   */
  public S hasServletNames(String... servletNames) {
    // check that actual FilterDTO we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (servletNames == null) failWithMessage("Expecting servletNames parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.servletNames).contains(servletNames);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual FilterDTO's servletNames contains <b>only</b> the given String elements and nothing else in whatever order.
   *
   * @param servletNames the given elements that should be contained in actual FilterDTO's servletNames.
   * @return this assertion object.
   * @throws AssertionError if the actual FilterDTO's servletNames does not contain all given String elements and nothing else.
   */
  public S hasOnlyServletNames(String... servletNames) {
    // check that actual FilterDTO we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (servletNames == null) failWithMessage("Expecting servletNames parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.servletNames).containsOnly(servletNames);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual FilterDTO's servletNames does not contain the given String elements.
   *
   * @param servletNames the given elements that should not be in actual FilterDTO's servletNames.
   * @return this assertion object.
   * @throws AssertionError if the actual FilterDTO's servletNames contains any given String elements.
   */
  public S doesNotHaveServletNames(String... servletNames) {
    // check that actual FilterDTO we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (servletNames == null) failWithMessage("Expecting servletNames parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.servletNames).doesNotContain(servletNames);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual FilterDTO has no servletNames.
   * @return this assertion object.
   * @throws AssertionError if the actual FilterDTO's servletNames is not empty.
   */
  public S hasNoServletNames() {
    // check that actual FilterDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have servletNames but had :\n  <%s>";

    // check that it is not empty
    if (actual.servletNames.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.servletNames));
    }

    // return the current assertion for method chaining
    return myself;
  }


}
