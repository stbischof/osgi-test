package org.osgi.test.assertj.dto.service.component.runtime.dto;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.api.Assertions;
import org.assertj.core.util.Objects;
import org.osgi.service.component.runtime.dto.SatisfiedReferenceDTO;

/**
 * Abstract base class for {@link SatisfiedReferenceDTO} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractSatisfiedReferenceDTOAssert<S extends AbstractSatisfiedReferenceDTOAssert<S, A>, A extends SatisfiedReferenceDTO> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractSatisfiedReferenceDTOAssert}</code> to make assertions on actual SatisfiedReferenceDTO.
   * @param actual the SatisfiedReferenceDTO we want to make assertions on.
   */
  protected AbstractSatisfiedReferenceDTOAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual SatisfiedReferenceDTO's boundServices contains the given org.osgi.framework.dto.ServiceReferenceDTO elements.
   * @param boundServices the given elements that should be contained in actual SatisfiedReferenceDTO's boundServices.
   * @return this assertion object.
   * @throws AssertionError if the actual SatisfiedReferenceDTO's boundServices does not contain all given org.osgi.framework.dto.ServiceReferenceDTO elements.
   */
  public S hasBoundServices(org.osgi.framework.dto.ServiceReferenceDTO... boundServices) {
    // check that actual SatisfiedReferenceDTO we want to make assertions on is not null.
    isNotNull();

    // check that given org.osgi.framework.dto.ServiceReferenceDTO varargs is not null.
    if (boundServices == null) failWithMessage("Expecting boundServices parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.boundServices).contains(boundServices);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual SatisfiedReferenceDTO's boundServices contains <b>only</b> the given org.osgi.framework.dto.ServiceReferenceDTO elements and nothing else in whatever order.
   *
   * @param boundServices the given elements that should be contained in actual SatisfiedReferenceDTO's boundServices.
   * @return this assertion object.
   * @throws AssertionError if the actual SatisfiedReferenceDTO's boundServices does not contain all given org.osgi.framework.dto.ServiceReferenceDTO elements and nothing else.
   */
  public S hasOnlyBoundServices(org.osgi.framework.dto.ServiceReferenceDTO... boundServices) {
    // check that actual SatisfiedReferenceDTO we want to make assertions on is not null.
    isNotNull();

    // check that given org.osgi.framework.dto.ServiceReferenceDTO varargs is not null.
    if (boundServices == null) failWithMessage("Expecting boundServices parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.boundServices).containsOnly(boundServices);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual SatisfiedReferenceDTO's boundServices does not contain the given org.osgi.framework.dto.ServiceReferenceDTO elements.
   *
   * @param boundServices the given elements that should not be in actual SatisfiedReferenceDTO's boundServices.
   * @return this assertion object.
   * @throws AssertionError if the actual SatisfiedReferenceDTO's boundServices contains any given org.osgi.framework.dto.ServiceReferenceDTO elements.
   */
  public S doesNotHaveBoundServices(org.osgi.framework.dto.ServiceReferenceDTO... boundServices) {
    // check that actual SatisfiedReferenceDTO we want to make assertions on is not null.
    isNotNull();

    // check that given org.osgi.framework.dto.ServiceReferenceDTO varargs is not null.
    if (boundServices == null) failWithMessage("Expecting boundServices parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.boundServices).doesNotContain(boundServices);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual SatisfiedReferenceDTO has no boundServices.
   * @return this assertion object.
   * @throws AssertionError if the actual SatisfiedReferenceDTO's boundServices is not empty.
   */
  public S hasNoBoundServices() {
    // check that actual SatisfiedReferenceDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have boundServices but had :\n  <%s>";

    // check that it is not empty
    if (actual.boundServices.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.boundServices));
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual SatisfiedReferenceDTO's name is equal to the given one.
   * @param name the given name to compare the actual SatisfiedReferenceDTO's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual SatisfiedReferenceDTO's name is not equal to the given one.
   */
  public S hasName(String name) {
    // check that actual SatisfiedReferenceDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualName = actual.name;
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual SatisfiedReferenceDTO's target is equal to the given one.
   * @param target the given target to compare the actual SatisfiedReferenceDTO's target to.
   * @return this assertion object.
   * @throws AssertionError - if the actual SatisfiedReferenceDTO's target is not equal to the given one.
   */
  public S hasTarget(String target) {
    // check that actual SatisfiedReferenceDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting target of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualTarget = actual.target;
    if (!Objects.areEqual(actualTarget, target)) {
      failWithMessage(assertjErrorMessage, actual, target, actualTarget);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
