package org.osgi.test.assertj.dto.resource.dto;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.osgi.resource.dto.CapabilityDTO;
import org.osgi.resource.dto.RequirementDTO;
import org.osgi.resource.dto.ResourceDTO;

/**
 * Abstract base class for {@link ResourceDTO} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractResourceDTOAssert<S extends AbstractResourceDTOAssert<S, A>, A extends ResourceDTO> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractResourceDTOAssert}</code> to make assertions on actual ResourceDTO.
   * @param actual the ResourceDTO we want to make assertions on.
   */
  protected AbstractResourceDTOAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual ResourceDTO's capabilities contains the given CapabilityDTO elements.
   * @param capabilities the given elements that should be contained in actual ResourceDTO's capabilities.
   * @return this assertion object.
   * @throws AssertionError if the actual ResourceDTO's capabilities does not contain all given CapabilityDTO elements.
   */
  public S hasCapabilities(CapabilityDTO... capabilities) {
    // check that actual ResourceDTO we want to make assertions on is not null.
    isNotNull();

    // check that given CapabilityDTO varargs is not null.
    if (capabilities == null) failWithMessage("Expecting capabilities parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.capabilities, capabilities);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ResourceDTO's capabilities contains the given CapabilityDTO elements in Collection.
   * @param capabilities the given elements that should be contained in actual ResourceDTO's capabilities.
   * @return this assertion object.
   * @throws AssertionError if the actual ResourceDTO's capabilities does not contain all given CapabilityDTO elements.
   */
  public S hasCapabilities(java.util.Collection<? extends CapabilityDTO> capabilities) {
    // check that actual ResourceDTO we want to make assertions on is not null.
    isNotNull();

    // check that given CapabilityDTO collection is not null.
    if (capabilities == null) {
      failWithMessage("Expecting capabilities parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.capabilities, capabilities.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ResourceDTO's capabilities contains <b>only</b> the given CapabilityDTO elements and nothing else in whatever order.
   * @param capabilities the given elements that should be contained in actual ResourceDTO's capabilities.
   * @return this assertion object.
   * @throws AssertionError if the actual ResourceDTO's capabilities does not contain all given CapabilityDTO elements.
   */
  public S hasOnlyCapabilities(CapabilityDTO... capabilities) {
    // check that actual ResourceDTO we want to make assertions on is not null.
    isNotNull();

    // check that given CapabilityDTO varargs is not null.
    if (capabilities == null) failWithMessage("Expecting capabilities parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.capabilities, capabilities);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ResourceDTO's capabilities contains <b>only</b> the given CapabilityDTO elements in Collection and nothing else in whatever order.
   * @param capabilities the given elements that should be contained in actual ResourceDTO's capabilities.
   * @return this assertion object.
   * @throws AssertionError if the actual ResourceDTO's capabilities does not contain all given CapabilityDTO elements.
   */
  public S hasOnlyCapabilities(java.util.Collection<? extends CapabilityDTO> capabilities) {
    // check that actual ResourceDTO we want to make assertions on is not null.
    isNotNull();

    // check that given CapabilityDTO collection is not null.
    if (capabilities == null) {
      failWithMessage("Expecting capabilities parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.capabilities, capabilities.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ResourceDTO's capabilities does not contain the given CapabilityDTO elements.
   *
   * @param capabilities the given elements that should not be in actual ResourceDTO's capabilities.
   * @return this assertion object.
   * @throws AssertionError if the actual ResourceDTO's capabilities contains any given CapabilityDTO elements.
   */
  public S doesNotHaveCapabilities(CapabilityDTO... capabilities) {
    // check that actual ResourceDTO we want to make assertions on is not null.
    isNotNull();

    // check that given CapabilityDTO varargs is not null.
    if (capabilities == null) failWithMessage("Expecting capabilities parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.capabilities, capabilities);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ResourceDTO's capabilities does not contain the given CapabilityDTO elements in Collection.
   *
   * @param capabilities the given elements that should not be in actual ResourceDTO's capabilities.
   * @return this assertion object.
   * @throws AssertionError if the actual ResourceDTO's capabilities contains any given CapabilityDTO elements.
   */
  public S doesNotHaveCapabilities(java.util.Collection<? extends CapabilityDTO> capabilities) {
    // check that actual ResourceDTO we want to make assertions on is not null.
    isNotNull();

    // check that given CapabilityDTO collection is not null.
    if (capabilities == null) {
      failWithMessage("Expecting capabilities parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.capabilities, capabilities.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ResourceDTO has no capabilities.
   * @return this assertion object.
   * @throws AssertionError if the actual ResourceDTO's capabilities is not empty.
   */
  public S hasNoCapabilities() {
    // check that actual ResourceDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have capabilities but had :\n  <%s>";

    // check
    if (actual.capabilities.iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.capabilities);
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual ResourceDTO's id is equal to the given one.
   * @param id the given id to compare the actual ResourceDTO's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ResourceDTO's id is not equal to the given one.
   */
  public S hasId(int id) {
    // check that actual ResourceDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualId = actual.id;
    if (actualId != id) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ResourceDTO's requirements contains the given RequirementDTO elements.
   * @param requirements the given elements that should be contained in actual ResourceDTO's requirements.
   * @return this assertion object.
   * @throws AssertionError if the actual ResourceDTO's requirements does not contain all given RequirementDTO elements.
   */
  public S hasRequirements(RequirementDTO... requirements) {
    // check that actual ResourceDTO we want to make assertions on is not null.
    isNotNull();

    // check that given RequirementDTO varargs is not null.
    if (requirements == null) failWithMessage("Expecting requirements parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.requirements, requirements);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ResourceDTO's requirements contains the given RequirementDTO elements in Collection.
   * @param requirements the given elements that should be contained in actual ResourceDTO's requirements.
   * @return this assertion object.
   * @throws AssertionError if the actual ResourceDTO's requirements does not contain all given RequirementDTO elements.
   */
  public S hasRequirements(java.util.Collection<? extends RequirementDTO> requirements) {
    // check that actual ResourceDTO we want to make assertions on is not null.
    isNotNull();

    // check that given RequirementDTO collection is not null.
    if (requirements == null) {
      failWithMessage("Expecting requirements parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.requirements, requirements.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ResourceDTO's requirements contains <b>only</b> the given RequirementDTO elements and nothing else in whatever order.
   * @param requirements the given elements that should be contained in actual ResourceDTO's requirements.
   * @return this assertion object.
   * @throws AssertionError if the actual ResourceDTO's requirements does not contain all given RequirementDTO elements.
   */
  public S hasOnlyRequirements(RequirementDTO... requirements) {
    // check that actual ResourceDTO we want to make assertions on is not null.
    isNotNull();

    // check that given RequirementDTO varargs is not null.
    if (requirements == null) failWithMessage("Expecting requirements parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.requirements, requirements);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ResourceDTO's requirements contains <b>only</b> the given RequirementDTO elements in Collection and nothing else in whatever order.
   * @param requirements the given elements that should be contained in actual ResourceDTO's requirements.
   * @return this assertion object.
   * @throws AssertionError if the actual ResourceDTO's requirements does not contain all given RequirementDTO elements.
   */
  public S hasOnlyRequirements(java.util.Collection<? extends RequirementDTO> requirements) {
    // check that actual ResourceDTO we want to make assertions on is not null.
    isNotNull();

    // check that given RequirementDTO collection is not null.
    if (requirements == null) {
      failWithMessage("Expecting requirements parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.requirements, requirements.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ResourceDTO's requirements does not contain the given RequirementDTO elements.
   *
   * @param requirements the given elements that should not be in actual ResourceDTO's requirements.
   * @return this assertion object.
   * @throws AssertionError if the actual ResourceDTO's requirements contains any given RequirementDTO elements.
   */
  public S doesNotHaveRequirements(RequirementDTO... requirements) {
    // check that actual ResourceDTO we want to make assertions on is not null.
    isNotNull();

    // check that given RequirementDTO varargs is not null.
    if (requirements == null) failWithMessage("Expecting requirements parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.requirements, requirements);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ResourceDTO's requirements does not contain the given RequirementDTO elements in Collection.
   *
   * @param requirements the given elements that should not be in actual ResourceDTO's requirements.
   * @return this assertion object.
   * @throws AssertionError if the actual ResourceDTO's requirements contains any given RequirementDTO elements.
   */
  public S doesNotHaveRequirements(java.util.Collection<? extends RequirementDTO> requirements) {
    // check that actual ResourceDTO we want to make assertions on is not null.
    isNotNull();

    // check that given RequirementDTO collection is not null.
    if (requirements == null) {
      failWithMessage("Expecting requirements parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.requirements, requirements.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ResourceDTO has no requirements.
   * @return this assertion object.
   * @throws AssertionError if the actual ResourceDTO's requirements is not empty.
   */
  public S hasNoRequirements() {
    // check that actual ResourceDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have requirements but had :\n  <%s>";

    // check
    if (actual.requirements.iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.requirements);
    }

    // return the current assertion for method chaining
    return myself;
  }


}
