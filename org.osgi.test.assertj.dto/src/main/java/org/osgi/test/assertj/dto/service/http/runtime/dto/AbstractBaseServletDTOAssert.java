package org.osgi.test.assertj.dto.service.http.runtime.dto;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;
import org.osgi.service.http.runtime.dto.BaseServletDTO;

/**
 * Abstract base class for {@link BaseServletDTO} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractBaseServletDTOAssert<S extends AbstractBaseServletDTOAssert<S, A>, A extends BaseServletDTO> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractBaseServletDTOAssert}</code> to make assertions on actual BaseServletDTO.
   * @param actual the BaseServletDTO we want to make assertions on.
   */
  protected AbstractBaseServletDTOAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual BaseServletDTO is asyncSupported.
   * @return this assertion object.
   * @throws AssertionError - if the actual BaseServletDTO is not asyncSupported.
   */
  public S isAsyncSupported() {
    // check that actual BaseServletDTO we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.asyncSupported) {
      failWithMessage("\nExpecting that actual BaseServletDTO is asyncSupported but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BaseServletDTO is not asyncSupported.
   * @return this assertion object.
   * @throws AssertionError - if the actual BaseServletDTO is asyncSupported.
   */
  public S isNotAsyncSupported() {
    // check that actual BaseServletDTO we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.asyncSupported) {
      failWithMessage("\nExpecting that actual BaseServletDTO is not asyncSupported but is.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BaseServletDTO's initParams is equal to the given one.
   * @param initParams the given initParams to compare the actual BaseServletDTO's initParams to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BaseServletDTO's initParams is not equal to the given one.
   */
  public S hasInitParams(java.util.Map initParams) {
    // check that actual BaseServletDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting initParams of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Map actualInitParams = actual.initParams;
    if (!Objects.areEqual(actualInitParams, initParams)) {
      failWithMessage(assertjErrorMessage, actual, initParams, actualInitParams);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BaseServletDTO's name is equal to the given one.
   * @param name the given name to compare the actual BaseServletDTO's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BaseServletDTO's name is not equal to the given one.
   */
  public S hasName(String name) {
    // check that actual BaseServletDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualName = actual.name;
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BaseServletDTO's serviceId is equal to the given one.
   * @param serviceId the given serviceId to compare the actual BaseServletDTO's serviceId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BaseServletDTO's serviceId is not equal to the given one.
   */
  public S hasServiceId(long serviceId) {
    // check that actual BaseServletDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting serviceId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    long actualServiceId = actual.serviceId;
    if (actualServiceId != serviceId) {
      failWithMessage(assertjErrorMessage, actual, serviceId, actualServiceId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BaseServletDTO's servletContextId is equal to the given one.
   * @param servletContextId the given servletContextId to compare the actual BaseServletDTO's servletContextId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BaseServletDTO's servletContextId is not equal to the given one.
   */
  public S hasServletContextId(long servletContextId) {
    // check that actual BaseServletDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting servletContextId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    long actualServletContextId = actual.servletContextId;
    if (actualServletContextId != servletContextId) {
      failWithMessage(assertjErrorMessage, actual, servletContextId, actualServletContextId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BaseServletDTO's servletInfo is equal to the given one.
   * @param servletInfo the given servletInfo to compare the actual BaseServletDTO's servletInfo to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BaseServletDTO's servletInfo is not equal to the given one.
   */
  public S hasServletInfo(String servletInfo) {
    // check that actual BaseServletDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting servletInfo of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualServletInfo = actual.servletInfo;
    if (!Objects.areEqual(actualServletInfo, servletInfo)) {
      failWithMessage(assertjErrorMessage, actual, servletInfo, actualServletInfo);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
