package org.osgi.test.assertj.dto.resource.dto;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.osgi.resource.dto.CapabilityRefDTO;
import org.osgi.resource.dto.RequirementRefDTO;
import org.osgi.resource.dto.WireDTO;
import org.osgi.resource.dto.WiringDTO;

/**
 * Abstract base class for {@link WiringDTO} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractWiringDTOAssert<S extends AbstractWiringDTOAssert<S, A>, A extends WiringDTO> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractWiringDTOAssert}</code> to make assertions on actual WiringDTO.
   * @param actual the WiringDTO we want to make assertions on.
   */
  protected AbstractWiringDTOAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual WiringDTO's capabilities contains the given CapabilityRefDTO elements.
   * @param capabilities the given elements that should be contained in actual WiringDTO's capabilities.
   * @return this assertion object.
   * @throws AssertionError if the actual WiringDTO's capabilities does not contain all given CapabilityRefDTO elements.
   */
  public S hasCapabilities(CapabilityRefDTO... capabilities) {
    // check that actual WiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given CapabilityRefDTO varargs is not null.
    if (capabilities == null) failWithMessage("Expecting capabilities parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.capabilities, capabilities);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WiringDTO's capabilities contains the given CapabilityRefDTO elements in Collection.
   * @param capabilities the given elements that should be contained in actual WiringDTO's capabilities.
   * @return this assertion object.
   * @throws AssertionError if the actual WiringDTO's capabilities does not contain all given CapabilityRefDTO elements.
   */
  public S hasCapabilities(java.util.Collection<? extends CapabilityRefDTO> capabilities) {
    // check that actual WiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given CapabilityRefDTO collection is not null.
    if (capabilities == null) {
      failWithMessage("Expecting capabilities parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.capabilities, capabilities.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WiringDTO's capabilities contains <b>only</b> the given CapabilityRefDTO elements and nothing else in whatever order.
   * @param capabilities the given elements that should be contained in actual WiringDTO's capabilities.
   * @return this assertion object.
   * @throws AssertionError if the actual WiringDTO's capabilities does not contain all given CapabilityRefDTO elements.
   */
  public S hasOnlyCapabilities(CapabilityRefDTO... capabilities) {
    // check that actual WiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given CapabilityRefDTO varargs is not null.
    if (capabilities == null) failWithMessage("Expecting capabilities parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.capabilities, capabilities);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WiringDTO's capabilities contains <b>only</b> the given CapabilityRefDTO elements in Collection and nothing else in whatever order.
   * @param capabilities the given elements that should be contained in actual WiringDTO's capabilities.
   * @return this assertion object.
   * @throws AssertionError if the actual WiringDTO's capabilities does not contain all given CapabilityRefDTO elements.
   */
  public S hasOnlyCapabilities(java.util.Collection<? extends CapabilityRefDTO> capabilities) {
    // check that actual WiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given CapabilityRefDTO collection is not null.
    if (capabilities == null) {
      failWithMessage("Expecting capabilities parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.capabilities, capabilities.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WiringDTO's capabilities does not contain the given CapabilityRefDTO elements.
   *
   * @param capabilities the given elements that should not be in actual WiringDTO's capabilities.
   * @return this assertion object.
   * @throws AssertionError if the actual WiringDTO's capabilities contains any given CapabilityRefDTO elements.
   */
  public S doesNotHaveCapabilities(CapabilityRefDTO... capabilities) {
    // check that actual WiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given CapabilityRefDTO varargs is not null.
    if (capabilities == null) failWithMessage("Expecting capabilities parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.capabilities, capabilities);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WiringDTO's capabilities does not contain the given CapabilityRefDTO elements in Collection.
   *
   * @param capabilities the given elements that should not be in actual WiringDTO's capabilities.
   * @return this assertion object.
   * @throws AssertionError if the actual WiringDTO's capabilities contains any given CapabilityRefDTO elements.
   */
  public S doesNotHaveCapabilities(java.util.Collection<? extends CapabilityRefDTO> capabilities) {
    // check that actual WiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given CapabilityRefDTO collection is not null.
    if (capabilities == null) {
      failWithMessage("Expecting capabilities parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.capabilities, capabilities.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WiringDTO has no capabilities.
   * @return this assertion object.
   * @throws AssertionError if the actual WiringDTO's capabilities is not empty.
   */
  public S hasNoCapabilities() {
    // check that actual WiringDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have capabilities but had :\n  <%s>";

    // check
    if (actual.capabilities.iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.capabilities);
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual WiringDTO's id is equal to the given one.
   * @param id the given id to compare the actual WiringDTO's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WiringDTO's id is not equal to the given one.
   */
  public S hasId(int id) {
    // check that actual WiringDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualId = actual.id;
    if (actualId != id) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WiringDTO's providedWires contains the given WireDTO elements.
   * @param providedWires the given elements that should be contained in actual WiringDTO's providedWires.
   * @return this assertion object.
   * @throws AssertionError if the actual WiringDTO's providedWires does not contain all given WireDTO elements.
   */
  public S hasProvidedWires(WireDTO... providedWires) {
    // check that actual WiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given WireDTO varargs is not null.
    if (providedWires == null) failWithMessage("Expecting providedWires parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.providedWires, providedWires);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WiringDTO's providedWires contains the given WireDTO elements in Collection.
   * @param providedWires the given elements that should be contained in actual WiringDTO's providedWires.
   * @return this assertion object.
   * @throws AssertionError if the actual WiringDTO's providedWires does not contain all given WireDTO elements.
   */
  public S hasProvidedWires(java.util.Collection<? extends WireDTO> providedWires) {
    // check that actual WiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given WireDTO collection is not null.
    if (providedWires == null) {
      failWithMessage("Expecting providedWires parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.providedWires, providedWires.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WiringDTO's providedWires contains <b>only</b> the given WireDTO elements and nothing else in whatever order.
   * @param providedWires the given elements that should be contained in actual WiringDTO's providedWires.
   * @return this assertion object.
   * @throws AssertionError if the actual WiringDTO's providedWires does not contain all given WireDTO elements.
   */
  public S hasOnlyProvidedWires(WireDTO... providedWires) {
    // check that actual WiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given WireDTO varargs is not null.
    if (providedWires == null) failWithMessage("Expecting providedWires parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.providedWires, providedWires);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WiringDTO's providedWires contains <b>only</b> the given WireDTO elements in Collection and nothing else in whatever order.
   * @param providedWires the given elements that should be contained in actual WiringDTO's providedWires.
   * @return this assertion object.
   * @throws AssertionError if the actual WiringDTO's providedWires does not contain all given WireDTO elements.
   */
  public S hasOnlyProvidedWires(java.util.Collection<? extends WireDTO> providedWires) {
    // check that actual WiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given WireDTO collection is not null.
    if (providedWires == null) {
      failWithMessage("Expecting providedWires parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.providedWires, providedWires.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WiringDTO's providedWires does not contain the given WireDTO elements.
   *
   * @param providedWires the given elements that should not be in actual WiringDTO's providedWires.
   * @return this assertion object.
   * @throws AssertionError if the actual WiringDTO's providedWires contains any given WireDTO elements.
   */
  public S doesNotHaveProvidedWires(WireDTO... providedWires) {
    // check that actual WiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given WireDTO varargs is not null.
    if (providedWires == null) failWithMessage("Expecting providedWires parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.providedWires, providedWires);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WiringDTO's providedWires does not contain the given WireDTO elements in Collection.
   *
   * @param providedWires the given elements that should not be in actual WiringDTO's providedWires.
   * @return this assertion object.
   * @throws AssertionError if the actual WiringDTO's providedWires contains any given WireDTO elements.
   */
  public S doesNotHaveProvidedWires(java.util.Collection<? extends WireDTO> providedWires) {
    // check that actual WiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given WireDTO collection is not null.
    if (providedWires == null) {
      failWithMessage("Expecting providedWires parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.providedWires, providedWires.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WiringDTO has no providedWires.
   * @return this assertion object.
   * @throws AssertionError if the actual WiringDTO's providedWires is not empty.
   */
  public S hasNoProvidedWires() {
    // check that actual WiringDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have providedWires but had :\n  <%s>";

    // check
    if (actual.providedWires.iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.providedWires);
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual WiringDTO's requiredWires contains the given WireDTO elements.
   * @param requiredWires the given elements that should be contained in actual WiringDTO's requiredWires.
   * @return this assertion object.
   * @throws AssertionError if the actual WiringDTO's requiredWires does not contain all given WireDTO elements.
   */
  public S hasRequiredWires(WireDTO... requiredWires) {
    // check that actual WiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given WireDTO varargs is not null.
    if (requiredWires == null) failWithMessage("Expecting requiredWires parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.requiredWires, requiredWires);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WiringDTO's requiredWires contains the given WireDTO elements in Collection.
   * @param requiredWires the given elements that should be contained in actual WiringDTO's requiredWires.
   * @return this assertion object.
   * @throws AssertionError if the actual WiringDTO's requiredWires does not contain all given WireDTO elements.
   */
  public S hasRequiredWires(java.util.Collection<? extends WireDTO> requiredWires) {
    // check that actual WiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given WireDTO collection is not null.
    if (requiredWires == null) {
      failWithMessage("Expecting requiredWires parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.requiredWires, requiredWires.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WiringDTO's requiredWires contains <b>only</b> the given WireDTO elements and nothing else in whatever order.
   * @param requiredWires the given elements that should be contained in actual WiringDTO's requiredWires.
   * @return this assertion object.
   * @throws AssertionError if the actual WiringDTO's requiredWires does not contain all given WireDTO elements.
   */
  public S hasOnlyRequiredWires(WireDTO... requiredWires) {
    // check that actual WiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given WireDTO varargs is not null.
    if (requiredWires == null) failWithMessage("Expecting requiredWires parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.requiredWires, requiredWires);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WiringDTO's requiredWires contains <b>only</b> the given WireDTO elements in Collection and nothing else in whatever order.
   * @param requiredWires the given elements that should be contained in actual WiringDTO's requiredWires.
   * @return this assertion object.
   * @throws AssertionError if the actual WiringDTO's requiredWires does not contain all given WireDTO elements.
   */
  public S hasOnlyRequiredWires(java.util.Collection<? extends WireDTO> requiredWires) {
    // check that actual WiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given WireDTO collection is not null.
    if (requiredWires == null) {
      failWithMessage("Expecting requiredWires parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.requiredWires, requiredWires.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WiringDTO's requiredWires does not contain the given WireDTO elements.
   *
   * @param requiredWires the given elements that should not be in actual WiringDTO's requiredWires.
   * @return this assertion object.
   * @throws AssertionError if the actual WiringDTO's requiredWires contains any given WireDTO elements.
   */
  public S doesNotHaveRequiredWires(WireDTO... requiredWires) {
    // check that actual WiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given WireDTO varargs is not null.
    if (requiredWires == null) failWithMessage("Expecting requiredWires parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.requiredWires, requiredWires);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WiringDTO's requiredWires does not contain the given WireDTO elements in Collection.
   *
   * @param requiredWires the given elements that should not be in actual WiringDTO's requiredWires.
   * @return this assertion object.
   * @throws AssertionError if the actual WiringDTO's requiredWires contains any given WireDTO elements.
   */
  public S doesNotHaveRequiredWires(java.util.Collection<? extends WireDTO> requiredWires) {
    // check that actual WiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given WireDTO collection is not null.
    if (requiredWires == null) {
      failWithMessage("Expecting requiredWires parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.requiredWires, requiredWires.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WiringDTO has no requiredWires.
   * @return this assertion object.
   * @throws AssertionError if the actual WiringDTO's requiredWires is not empty.
   */
  public S hasNoRequiredWires() {
    // check that actual WiringDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have requiredWires but had :\n  <%s>";

    // check
    if (actual.requiredWires.iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.requiredWires);
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual WiringDTO's requirements contains the given RequirementRefDTO elements.
   * @param requirements the given elements that should be contained in actual WiringDTO's requirements.
   * @return this assertion object.
   * @throws AssertionError if the actual WiringDTO's requirements does not contain all given RequirementRefDTO elements.
   */
  public S hasRequirements(RequirementRefDTO... requirements) {
    // check that actual WiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given RequirementRefDTO varargs is not null.
    if (requirements == null) failWithMessage("Expecting requirements parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.requirements, requirements);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WiringDTO's requirements contains the given RequirementRefDTO elements in Collection.
   * @param requirements the given elements that should be contained in actual WiringDTO's requirements.
   * @return this assertion object.
   * @throws AssertionError if the actual WiringDTO's requirements does not contain all given RequirementRefDTO elements.
   */
  public S hasRequirements(java.util.Collection<? extends RequirementRefDTO> requirements) {
    // check that actual WiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given RequirementRefDTO collection is not null.
    if (requirements == null) {
      failWithMessage("Expecting requirements parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.requirements, requirements.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WiringDTO's requirements contains <b>only</b> the given RequirementRefDTO elements and nothing else in whatever order.
   * @param requirements the given elements that should be contained in actual WiringDTO's requirements.
   * @return this assertion object.
   * @throws AssertionError if the actual WiringDTO's requirements does not contain all given RequirementRefDTO elements.
   */
  public S hasOnlyRequirements(RequirementRefDTO... requirements) {
    // check that actual WiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given RequirementRefDTO varargs is not null.
    if (requirements == null) failWithMessage("Expecting requirements parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.requirements, requirements);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WiringDTO's requirements contains <b>only</b> the given RequirementRefDTO elements in Collection and nothing else in whatever order.
   * @param requirements the given elements that should be contained in actual WiringDTO's requirements.
   * @return this assertion object.
   * @throws AssertionError if the actual WiringDTO's requirements does not contain all given RequirementRefDTO elements.
   */
  public S hasOnlyRequirements(java.util.Collection<? extends RequirementRefDTO> requirements) {
    // check that actual WiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given RequirementRefDTO collection is not null.
    if (requirements == null) {
      failWithMessage("Expecting requirements parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.requirements, requirements.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WiringDTO's requirements does not contain the given RequirementRefDTO elements.
   *
   * @param requirements the given elements that should not be in actual WiringDTO's requirements.
   * @return this assertion object.
   * @throws AssertionError if the actual WiringDTO's requirements contains any given RequirementRefDTO elements.
   */
  public S doesNotHaveRequirements(RequirementRefDTO... requirements) {
    // check that actual WiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given RequirementRefDTO varargs is not null.
    if (requirements == null) failWithMessage("Expecting requirements parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.requirements, requirements);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WiringDTO's requirements does not contain the given RequirementRefDTO elements in Collection.
   *
   * @param requirements the given elements that should not be in actual WiringDTO's requirements.
   * @return this assertion object.
   * @throws AssertionError if the actual WiringDTO's requirements contains any given RequirementRefDTO elements.
   */
  public S doesNotHaveRequirements(java.util.Collection<? extends RequirementRefDTO> requirements) {
    // check that actual WiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given RequirementRefDTO collection is not null.
    if (requirements == null) {
      failWithMessage("Expecting requirements parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.requirements, requirements.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WiringDTO has no requirements.
   * @return this assertion object.
   * @throws AssertionError if the actual WiringDTO's requirements is not empty.
   */
  public S hasNoRequirements() {
    // check that actual WiringDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have requirements but had :\n  <%s>";

    // check
    if (actual.requirements.iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.requirements);
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual WiringDTO's resource is equal to the given one.
   * @param resource the given resource to compare the actual WiringDTO's resource to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WiringDTO's resource is not equal to the given one.
   */
  public S hasResource(int resource) {
    // check that actual WiringDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting resource of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualResource = actual.resource;
    if (actualResource != resource) {
      failWithMessage(assertjErrorMessage, actual, resource, actualResource);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
