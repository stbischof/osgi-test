package org.osgi.test.assertj.dto.framework.startlevel.dto;

import org.assertj.core.api.AbstractObjectAssert;
import org.osgi.framework.startlevel.dto.FrameworkStartLevelDTO;

/**
 * Abstract base class for {@link FrameworkStartLevelDTO} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractFrameworkStartLevelDTOAssert<S extends AbstractFrameworkStartLevelDTOAssert<S, A>, A extends FrameworkStartLevelDTO> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractFrameworkStartLevelDTOAssert}</code> to make assertions on actual FrameworkStartLevelDTO.
   * @param actual the FrameworkStartLevelDTO we want to make assertions on.
   */
  protected AbstractFrameworkStartLevelDTOAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual FrameworkStartLevelDTO's initialBundleStartLevel is equal to the given one.
   * @param initialBundleStartLevel the given initialBundleStartLevel to compare the actual FrameworkStartLevelDTO's initialBundleStartLevel to.
   * @return this assertion object.
   * @throws AssertionError - if the actual FrameworkStartLevelDTO's initialBundleStartLevel is not equal to the given one.
   */
  public S hasInitialBundleStartLevel(int initialBundleStartLevel) {
    // check that actual FrameworkStartLevelDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting initialBundleStartLevel of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualInitialBundleStartLevel = actual.initialBundleStartLevel;
    if (actualInitialBundleStartLevel != initialBundleStartLevel) {
      failWithMessage(assertjErrorMessage, actual, initialBundleStartLevel, actualInitialBundleStartLevel);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual FrameworkStartLevelDTO's startLevel is equal to the given one.
   * @param startLevel the given startLevel to compare the actual FrameworkStartLevelDTO's startLevel to.
   * @return this assertion object.
   * @throws AssertionError - if the actual FrameworkStartLevelDTO's startLevel is not equal to the given one.
   */
  public S hasStartLevel(int startLevel) {
    // check that actual FrameworkStartLevelDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting startLevel of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualStartLevel = actual.startLevel;
    if (actualStartLevel != startLevel) {
      failWithMessage(assertjErrorMessage, actual, startLevel, actualStartLevel);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
