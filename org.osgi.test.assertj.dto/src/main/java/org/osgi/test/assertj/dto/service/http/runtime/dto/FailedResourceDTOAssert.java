package org.osgi.test.assertj.dto.service.http.runtime.dto;

import org.osgi.service.http.runtime.dto.FailedResourceDTO;

/**
 * {@link FailedResourceDTO} specific assertions - Generated by CustomAssertionGenerator.
 *
 * Although this class is not final to allow Soft assertions proxy, if you wish to extend it, 
 * extend {@link AbstractFailedResourceDTOAssert} instead.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class FailedResourceDTOAssert extends AbstractFailedResourceDTOAssert<FailedResourceDTOAssert, FailedResourceDTO> {

  /**
   * Creates a new <code>{@link FailedResourceDTOAssert}</code> to make assertions on actual FailedResourceDTO.
   * @param actual the FailedResourceDTO we want to make assertions on.
   */
  public FailedResourceDTOAssert(FailedResourceDTO actual) {
    super(actual, FailedResourceDTOAssert.class);
  }

  /**
   * An entry point for FailedResourceDTOAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myFailedResourceDTO)</code> and get specific assertion with code completion.
   * @param actual the FailedResourceDTO we want to make assertions on.
   * @return a new <code>{@link FailedResourceDTOAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static FailedResourceDTOAssert assertThat(FailedResourceDTO actual) {
    return new FailedResourceDTOAssert(actual);
  }
}
