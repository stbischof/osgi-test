package org.osgi.test.assertj.dto.framework.wiring.dto;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.osgi.framework.wiring.dto.BundleRevisionDTO;
import org.osgi.framework.wiring.dto.BundleWiringDTO;

/**
 * Abstract base class for {@link BundleWiringDTO} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractBundleWiringDTOAssert<S extends AbstractBundleWiringDTOAssert<S, A>, A extends BundleWiringDTO> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractBundleWiringDTOAssert}</code> to make assertions on actual BundleWiringDTO.
   * @param actual the BundleWiringDTO we want to make assertions on.
   */
  protected AbstractBundleWiringDTOAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual BundleWiringDTO's bundle is equal to the given one.
   * @param bundle the given bundle to compare the actual BundleWiringDTO's bundle to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BundleWiringDTO's bundle is not equal to the given one.
   */
  public S hasBundle(long bundle) {
    // check that actual BundleWiringDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting bundle of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    long actualBundle = actual.bundle;
    if (actualBundle != bundle) {
      failWithMessage(assertjErrorMessage, actual, bundle, actualBundle);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BundleWiringDTO's nodes contains the given BundleWiringDTO.NodeDTO elements.
   * @param nodes the given elements that should be contained in actual BundleWiringDTO's nodes.
   * @return this assertion object.
   * @throws AssertionError if the actual BundleWiringDTO's nodes does not contain all given BundleWiringDTO.NodeDTO elements.
   */
  public S hasNodes(BundleWiringDTO.NodeDTO... nodes) {
    // check that actual BundleWiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given BundleWiringDTO.NodeDTO varargs is not null.
    if (nodes == null) failWithMessage("Expecting nodes parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.nodes, nodes);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BundleWiringDTO's nodes contains the given BundleWiringDTO.NodeDTO elements in Collection.
   * @param nodes the given elements that should be contained in actual BundleWiringDTO's nodes.
   * @return this assertion object.
   * @throws AssertionError if the actual BundleWiringDTO's nodes does not contain all given BundleWiringDTO.NodeDTO elements.
   */
  public S hasNodes(java.util.Collection<? extends BundleWiringDTO.NodeDTO> nodes) {
    // check that actual BundleWiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given BundleWiringDTO.NodeDTO collection is not null.
    if (nodes == null) {
      failWithMessage("Expecting nodes parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.nodes, nodes.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BundleWiringDTO's nodes contains <b>only</b> the given BundleWiringDTO.NodeDTO elements and nothing else in whatever order.
   * @param nodes the given elements that should be contained in actual BundleWiringDTO's nodes.
   * @return this assertion object.
   * @throws AssertionError if the actual BundleWiringDTO's nodes does not contain all given BundleWiringDTO.NodeDTO elements.
   */
  public S hasOnlyNodes(BundleWiringDTO.NodeDTO... nodes) {
    // check that actual BundleWiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given BundleWiringDTO.NodeDTO varargs is not null.
    if (nodes == null) failWithMessage("Expecting nodes parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.nodes, nodes);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BundleWiringDTO's nodes contains <b>only</b> the given BundleWiringDTO.NodeDTO elements in Collection and nothing else in whatever order.
   * @param nodes the given elements that should be contained in actual BundleWiringDTO's nodes.
   * @return this assertion object.
   * @throws AssertionError if the actual BundleWiringDTO's nodes does not contain all given BundleWiringDTO.NodeDTO elements.
   */
  public S hasOnlyNodes(java.util.Collection<? extends BundleWiringDTO.NodeDTO> nodes) {
    // check that actual BundleWiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given BundleWiringDTO.NodeDTO collection is not null.
    if (nodes == null) {
      failWithMessage("Expecting nodes parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.nodes, nodes.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BundleWiringDTO's nodes does not contain the given BundleWiringDTO.NodeDTO elements.
   *
   * @param nodes the given elements that should not be in actual BundleWiringDTO's nodes.
   * @return this assertion object.
   * @throws AssertionError if the actual BundleWiringDTO's nodes contains any given BundleWiringDTO.NodeDTO elements.
   */
  public S doesNotHaveNodes(BundleWiringDTO.NodeDTO... nodes) {
    // check that actual BundleWiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given BundleWiringDTO.NodeDTO varargs is not null.
    if (nodes == null) failWithMessage("Expecting nodes parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.nodes, nodes);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BundleWiringDTO's nodes does not contain the given BundleWiringDTO.NodeDTO elements in Collection.
   *
   * @param nodes the given elements that should not be in actual BundleWiringDTO's nodes.
   * @return this assertion object.
   * @throws AssertionError if the actual BundleWiringDTO's nodes contains any given BundleWiringDTO.NodeDTO elements.
   */
  public S doesNotHaveNodes(java.util.Collection<? extends BundleWiringDTO.NodeDTO> nodes) {
    // check that actual BundleWiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given BundleWiringDTO.NodeDTO collection is not null.
    if (nodes == null) {
      failWithMessage("Expecting nodes parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.nodes, nodes.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BundleWiringDTO has no nodes.
   * @return this assertion object.
   * @throws AssertionError if the actual BundleWiringDTO's nodes is not empty.
   */
  public S hasNoNodes() {
    // check that actual BundleWiringDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have nodes but had :\n  <%s>";

    // check
    if (actual.nodes.iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.nodes);
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual BundleWiringDTO's resources contains the given BundleRevisionDTO elements.
   * @param resources the given elements that should be contained in actual BundleWiringDTO's resources.
   * @return this assertion object.
   * @throws AssertionError if the actual BundleWiringDTO's resources does not contain all given BundleRevisionDTO elements.
   */
  public S hasResources(BundleRevisionDTO... resources) {
    // check that actual BundleWiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given BundleRevisionDTO varargs is not null.
    if (resources == null) failWithMessage("Expecting resources parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.resources, resources);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BundleWiringDTO's resources contains the given BundleRevisionDTO elements in Collection.
   * @param resources the given elements that should be contained in actual BundleWiringDTO's resources.
   * @return this assertion object.
   * @throws AssertionError if the actual BundleWiringDTO's resources does not contain all given BundleRevisionDTO elements.
   */
  public S hasResources(java.util.Collection<? extends BundleRevisionDTO> resources) {
    // check that actual BundleWiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given BundleRevisionDTO collection is not null.
    if (resources == null) {
      failWithMessage("Expecting resources parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.resources, resources.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BundleWiringDTO's resources contains <b>only</b> the given BundleRevisionDTO elements and nothing else in whatever order.
   * @param resources the given elements that should be contained in actual BundleWiringDTO's resources.
   * @return this assertion object.
   * @throws AssertionError if the actual BundleWiringDTO's resources does not contain all given BundleRevisionDTO elements.
   */
  public S hasOnlyResources(BundleRevisionDTO... resources) {
    // check that actual BundleWiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given BundleRevisionDTO varargs is not null.
    if (resources == null) failWithMessage("Expecting resources parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.resources, resources);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BundleWiringDTO's resources contains <b>only</b> the given BundleRevisionDTO elements in Collection and nothing else in whatever order.
   * @param resources the given elements that should be contained in actual BundleWiringDTO's resources.
   * @return this assertion object.
   * @throws AssertionError if the actual BundleWiringDTO's resources does not contain all given BundleRevisionDTO elements.
   */
  public S hasOnlyResources(java.util.Collection<? extends BundleRevisionDTO> resources) {
    // check that actual BundleWiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given BundleRevisionDTO collection is not null.
    if (resources == null) {
      failWithMessage("Expecting resources parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.resources, resources.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BundleWiringDTO's resources does not contain the given BundleRevisionDTO elements.
   *
   * @param resources the given elements that should not be in actual BundleWiringDTO's resources.
   * @return this assertion object.
   * @throws AssertionError if the actual BundleWiringDTO's resources contains any given BundleRevisionDTO elements.
   */
  public S doesNotHaveResources(BundleRevisionDTO... resources) {
    // check that actual BundleWiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given BundleRevisionDTO varargs is not null.
    if (resources == null) failWithMessage("Expecting resources parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.resources, resources);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BundleWiringDTO's resources does not contain the given BundleRevisionDTO elements in Collection.
   *
   * @param resources the given elements that should not be in actual BundleWiringDTO's resources.
   * @return this assertion object.
   * @throws AssertionError if the actual BundleWiringDTO's resources contains any given BundleRevisionDTO elements.
   */
  public S doesNotHaveResources(java.util.Collection<? extends BundleRevisionDTO> resources) {
    // check that actual BundleWiringDTO we want to make assertions on is not null.
    isNotNull();

    // check that given BundleRevisionDTO collection is not null.
    if (resources == null) {
      failWithMessage("Expecting resources parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.resources, resources.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BundleWiringDTO has no resources.
   * @return this assertion object.
   * @throws AssertionError if the actual BundleWiringDTO's resources is not empty.
   */
  public S hasNoResources() {
    // check that actual BundleWiringDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have resources but had :\n  <%s>";

    // check
    if (actual.resources.iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.resources);
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual BundleWiringDTO's root is equal to the given one.
   * @param root the given root to compare the actual BundleWiringDTO's root to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BundleWiringDTO's root is not equal to the given one.
   */
  public S hasRoot(int root) {
    // check that actual BundleWiringDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting root of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualRoot = actual.root;
    if (actualRoot != root) {
      failWithMessage(assertjErrorMessage, actual, root, actualRoot);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
