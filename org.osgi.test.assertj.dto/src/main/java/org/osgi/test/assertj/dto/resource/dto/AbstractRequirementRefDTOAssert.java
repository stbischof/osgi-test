package org.osgi.test.assertj.dto.resource.dto;

import org.assertj.core.api.AbstractObjectAssert;
import org.osgi.resource.dto.RequirementRefDTO;

/**
 * Abstract base class for {@link RequirementRefDTO} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractRequirementRefDTOAssert<S extends AbstractRequirementRefDTOAssert<S, A>, A extends RequirementRefDTO> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractRequirementRefDTOAssert}</code> to make assertions on actual RequirementRefDTO.
   * @param actual the RequirementRefDTO we want to make assertions on.
   */
  protected AbstractRequirementRefDTOAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual RequirementRefDTO's requirement is equal to the given one.
   * @param requirement the given requirement to compare the actual RequirementRefDTO's requirement to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RequirementRefDTO's requirement is not equal to the given one.
   */
  public S hasRequirement(int requirement) {
    // check that actual RequirementRefDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting requirement of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualRequirement = actual.requirement;
    if (actualRequirement != requirement) {
      failWithMessage(assertjErrorMessage, actual, requirement, actualRequirement);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RequirementRefDTO's resource is equal to the given one.
   * @param resource the given resource to compare the actual RequirementRefDTO's resource to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RequirementRefDTO's resource is not equal to the given one.
   */
  public S hasResource(int resource) {
    // check that actual RequirementRefDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting resource of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualResource = actual.resource;
    if (actualResource != resource) {
      failWithMessage(assertjErrorMessage, actual, resource, actualResource);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
