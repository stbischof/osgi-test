package org.osgi.test.assertj.dto.service.http.runtime.dto;

import org.assertj.core.api.Assertions;
import org.osgi.service.http.runtime.dto.ErrorPageDTO;

/**
 * Abstract base class for {@link ErrorPageDTO} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractErrorPageDTOAssert<S extends AbstractErrorPageDTOAssert<S, A>, A extends ErrorPageDTO> extends AbstractBaseServletDTOAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractErrorPageDTOAssert}</code> to make assertions on actual ErrorPageDTO.
   * @param actual the ErrorPageDTO we want to make assertions on.
   */
  protected AbstractErrorPageDTOAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual ErrorPageDTO's errorCodes contains the given long elements.
   * @param errorCodes the given elements that should be contained in actual ErrorPageDTO's errorCodes.
   * @return this assertion object.
   * @throws AssertionError if the actual ErrorPageDTO's errorCodes does not contain all given long elements.
   */
  public S hasErrorCodes(long... errorCodes) {
    // check that actual ErrorPageDTO we want to make assertions on is not null.
    isNotNull();

    // check that given long varargs is not null.
    if (errorCodes == null) failWithMessage("Expecting errorCodes parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.errorCodes).contains(errorCodes);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ErrorPageDTO's errorCodes contains <b>only</b> the given long elements and nothing else in whatever order.
   *
   * @param errorCodes the given elements that should be contained in actual ErrorPageDTO's errorCodes.
   * @return this assertion object.
   * @throws AssertionError if the actual ErrorPageDTO's errorCodes does not contain all given long elements and nothing else.
   */
  public S hasOnlyErrorCodes(long... errorCodes) {
    // check that actual ErrorPageDTO we want to make assertions on is not null.
    isNotNull();

    // check that given long varargs is not null.
    if (errorCodes == null) failWithMessage("Expecting errorCodes parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.errorCodes).containsOnly(errorCodes);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ErrorPageDTO's errorCodes does not contain the given long elements.
   *
   * @param errorCodes the given elements that should not be in actual ErrorPageDTO's errorCodes.
   * @return this assertion object.
   * @throws AssertionError if the actual ErrorPageDTO's errorCodes contains any given long elements.
   */
  public S doesNotHaveErrorCodes(long... errorCodes) {
    // check that actual ErrorPageDTO we want to make assertions on is not null.
    isNotNull();

    // check that given long varargs is not null.
    if (errorCodes == null) failWithMessage("Expecting errorCodes parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.errorCodes).doesNotContain(errorCodes);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ErrorPageDTO has no errorCodes.
   * @return this assertion object.
   * @throws AssertionError if the actual ErrorPageDTO's errorCodes is not empty.
   */
  public S hasNoErrorCodes() {
    // check that actual ErrorPageDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have errorCodes but had :\n  <%s>";

    // check that it is not empty
    if (actual.errorCodes.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.errorCodes));
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual ErrorPageDTO's exceptions contains the given String elements.
   * @param exceptions the given elements that should be contained in actual ErrorPageDTO's exceptions.
   * @return this assertion object.
   * @throws AssertionError if the actual ErrorPageDTO's exceptions does not contain all given String elements.
   */
  public S hasExceptions(String... exceptions) {
    // check that actual ErrorPageDTO we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (exceptions == null) failWithMessage("Expecting exceptions parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.exceptions).contains(exceptions);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ErrorPageDTO's exceptions contains <b>only</b> the given String elements and nothing else in whatever order.
   *
   * @param exceptions the given elements that should be contained in actual ErrorPageDTO's exceptions.
   * @return this assertion object.
   * @throws AssertionError if the actual ErrorPageDTO's exceptions does not contain all given String elements and nothing else.
   */
  public S hasOnlyExceptions(String... exceptions) {
    // check that actual ErrorPageDTO we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (exceptions == null) failWithMessage("Expecting exceptions parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.exceptions).containsOnly(exceptions);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ErrorPageDTO's exceptions does not contain the given String elements.
   *
   * @param exceptions the given elements that should not be in actual ErrorPageDTO's exceptions.
   * @return this assertion object.
   * @throws AssertionError if the actual ErrorPageDTO's exceptions contains any given String elements.
   */
  public S doesNotHaveExceptions(String... exceptions) {
    // check that actual ErrorPageDTO we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (exceptions == null) failWithMessage("Expecting exceptions parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.exceptions).doesNotContain(exceptions);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ErrorPageDTO has no exceptions.
   * @return this assertion object.
   * @throws AssertionError if the actual ErrorPageDTO's exceptions is not empty.
   */
  public S hasNoExceptions() {
    // check that actual ErrorPageDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have exceptions but had :\n  <%s>";

    // check that it is not empty
    if (actual.exceptions.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.exceptions));
    }

    // return the current assertion for method chaining
    return myself;
  }


}
