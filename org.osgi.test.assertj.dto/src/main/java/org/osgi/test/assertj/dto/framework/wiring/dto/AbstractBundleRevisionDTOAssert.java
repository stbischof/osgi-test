package org.osgi.test.assertj.dto.framework.wiring.dto;

import org.assertj.core.util.Objects;
import org.osgi.framework.wiring.dto.BundleRevisionDTO;
import org.osgi.test.assertj.dto.resource.dto.AbstractResourceDTOAssert;

/**
 * Abstract base class for {@link BundleRevisionDTO} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractBundleRevisionDTOAssert<S extends AbstractBundleRevisionDTOAssert<S, A>, A extends BundleRevisionDTO> extends AbstractResourceDTOAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractBundleRevisionDTOAssert}</code> to make assertions on actual BundleRevisionDTO.
   * @param actual the BundleRevisionDTO we want to make assertions on.
   */
  protected AbstractBundleRevisionDTOAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual BundleRevisionDTO's bundle is equal to the given one.
   * @param bundle the given bundle to compare the actual BundleRevisionDTO's bundle to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BundleRevisionDTO's bundle is not equal to the given one.
   */
  public S hasBundle(long bundle) {
    // check that actual BundleRevisionDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting bundle of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    long actualBundle = actual.bundle;
    if (actualBundle != bundle) {
      failWithMessage(assertjErrorMessage, actual, bundle, actualBundle);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BundleRevisionDTO's symbolicName is equal to the given one.
   * @param symbolicName the given symbolicName to compare the actual BundleRevisionDTO's symbolicName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BundleRevisionDTO's symbolicName is not equal to the given one.
   */
  public S hasSymbolicName(String symbolicName) {
    // check that actual BundleRevisionDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting symbolicName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualSymbolicName = actual.symbolicName;
    if (!Objects.areEqual(actualSymbolicName, symbolicName)) {
      failWithMessage(assertjErrorMessage, actual, symbolicName, actualSymbolicName);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BundleRevisionDTO's type is equal to the given one.
   * @param type the given type to compare the actual BundleRevisionDTO's type to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BundleRevisionDTO's type is not equal to the given one.
   */
  public S hasType(int type) {
    // check that actual BundleRevisionDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting type of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualType = actual.type;
    if (actualType != type) {
      failWithMessage(assertjErrorMessage, actual, type, actualType);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BundleRevisionDTO's version is equal to the given one.
   * @param version the given version to compare the actual BundleRevisionDTO's version to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BundleRevisionDTO's version is not equal to the given one.
   */
  public S hasVersion(String version) {
    // check that actual BundleRevisionDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting version of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualVersion = actual.version;
    if (!Objects.areEqual(actualVersion, version)) {
      failWithMessage(assertjErrorMessage, actual, version, actualVersion);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
