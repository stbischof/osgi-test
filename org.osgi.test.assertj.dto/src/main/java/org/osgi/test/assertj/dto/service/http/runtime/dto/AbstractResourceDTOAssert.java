package org.osgi.test.assertj.dto.service.http.runtime.dto;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.api.Assertions;
import org.assertj.core.util.Objects;
import org.osgi.service.http.runtime.dto.ResourceDTO;

/**
 * Abstract base class for {@link ResourceDTO} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractResourceDTOAssert<S extends AbstractResourceDTOAssert<S, A>, A extends ResourceDTO> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractResourceDTOAssert}</code> to make assertions on actual ResourceDTO.
   * @param actual the ResourceDTO we want to make assertions on.
   */
  protected AbstractResourceDTOAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual ResourceDTO's patterns contains the given String elements.
   * @param patterns the given elements that should be contained in actual ResourceDTO's patterns.
   * @return this assertion object.
   * @throws AssertionError if the actual ResourceDTO's patterns does not contain all given String elements.
   */
  public S hasPatterns(String... patterns) {
    // check that actual ResourceDTO we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (patterns == null) failWithMessage("Expecting patterns parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.patterns).contains(patterns);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ResourceDTO's patterns contains <b>only</b> the given String elements and nothing else in whatever order.
   *
   * @param patterns the given elements that should be contained in actual ResourceDTO's patterns.
   * @return this assertion object.
   * @throws AssertionError if the actual ResourceDTO's patterns does not contain all given String elements and nothing else.
   */
  public S hasOnlyPatterns(String... patterns) {
    // check that actual ResourceDTO we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (patterns == null) failWithMessage("Expecting patterns parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.patterns).containsOnly(patterns);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ResourceDTO's patterns does not contain the given String elements.
   *
   * @param patterns the given elements that should not be in actual ResourceDTO's patterns.
   * @return this assertion object.
   * @throws AssertionError if the actual ResourceDTO's patterns contains any given String elements.
   */
  public S doesNotHavePatterns(String... patterns) {
    // check that actual ResourceDTO we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (patterns == null) failWithMessage("Expecting patterns parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.patterns).doesNotContain(patterns);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ResourceDTO has no patterns.
   * @return this assertion object.
   * @throws AssertionError if the actual ResourceDTO's patterns is not empty.
   */
  public S hasNoPatterns() {
    // check that actual ResourceDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have patterns but had :\n  <%s>";

    // check that it is not empty
    if (actual.patterns.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.patterns));
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual ResourceDTO's prefix is equal to the given one.
   * @param prefix the given prefix to compare the actual ResourceDTO's prefix to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ResourceDTO's prefix is not equal to the given one.
   */
  public S hasPrefix(String prefix) {
    // check that actual ResourceDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting prefix of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualPrefix = actual.prefix;
    if (!Objects.areEqual(actualPrefix, prefix)) {
      failWithMessage(assertjErrorMessage, actual, prefix, actualPrefix);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ResourceDTO's serviceId is equal to the given one.
   * @param serviceId the given serviceId to compare the actual ResourceDTO's serviceId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ResourceDTO's serviceId is not equal to the given one.
   */
  public S hasServiceId(long serviceId) {
    // check that actual ResourceDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting serviceId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    long actualServiceId = actual.serviceId;
    if (actualServiceId != serviceId) {
      failWithMessage(assertjErrorMessage, actual, serviceId, actualServiceId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ResourceDTO's servletContextId is equal to the given one.
   * @param servletContextId the given servletContextId to compare the actual ResourceDTO's servletContextId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ResourceDTO's servletContextId is not equal to the given one.
   */
  public S hasServletContextId(long servletContextId) {
    // check that actual ResourceDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting servletContextId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    long actualServletContextId = actual.servletContextId;
    if (actualServletContextId != servletContextId) {
      failWithMessage(assertjErrorMessage, actual, servletContextId, actualServletContextId);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
