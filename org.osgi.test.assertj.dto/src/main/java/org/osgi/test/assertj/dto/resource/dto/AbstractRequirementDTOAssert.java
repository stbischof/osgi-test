package org.osgi.test.assertj.dto.resource.dto;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;
import org.osgi.resource.dto.RequirementDTO;

/**
 * Abstract base class for {@link RequirementDTO} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractRequirementDTOAssert<S extends AbstractRequirementDTOAssert<S, A>, A extends RequirementDTO> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractRequirementDTOAssert}</code> to make assertions on actual RequirementDTO.
   * @param actual the RequirementDTO we want to make assertions on.
   */
  protected AbstractRequirementDTOAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual RequirementDTO's attributes is equal to the given one.
   * @param attributes the given attributes to compare the actual RequirementDTO's attributes to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RequirementDTO's attributes is not equal to the given one.
   */
  public S hasAttributes(java.util.Map attributes) {
    // check that actual RequirementDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting attributes of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Map actualAttributes = actual.attributes;
    if (!Objects.areEqual(actualAttributes, attributes)) {
      failWithMessage(assertjErrorMessage, actual, attributes, actualAttributes);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RequirementDTO's directives is equal to the given one.
   * @param directives the given directives to compare the actual RequirementDTO's directives to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RequirementDTO's directives is not equal to the given one.
   */
  public S hasDirectives(java.util.Map directives) {
    // check that actual RequirementDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting directives of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Map actualDirectives = actual.directives;
    if (!Objects.areEqual(actualDirectives, directives)) {
      failWithMessage(assertjErrorMessage, actual, directives, actualDirectives);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RequirementDTO's id is equal to the given one.
   * @param id the given id to compare the actual RequirementDTO's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RequirementDTO's id is not equal to the given one.
   */
  public S hasId(int id) {
    // check that actual RequirementDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualId = actual.id;
    if (actualId != id) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RequirementDTO's namespace is equal to the given one.
   * @param namespace the given namespace to compare the actual RequirementDTO's namespace to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RequirementDTO's namespace is not equal to the given one.
   */
  public S hasNamespace(String namespace) {
    // check that actual RequirementDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting namespace of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualNamespace = actual.namespace;
    if (!Objects.areEqual(actualNamespace, namespace)) {
      failWithMessage(assertjErrorMessage, actual, namespace, actualNamespace);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RequirementDTO's resource is equal to the given one.
   * @param resource the given resource to compare the actual RequirementDTO's resource to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RequirementDTO's resource is not equal to the given one.
   */
  public S hasResource(int resource) {
    // check that actual RequirementDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting resource of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualResource = actual.resource;
    if (actualResource != resource) {
      failWithMessage(assertjErrorMessage, actual, resource, actualResource);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
