package org.osgi.test.assertj.dto.service.component.runtime.dto;

import org.osgi.service.component.runtime.dto.ComponentConfigurationDTO;

/**
 * {@link ComponentConfigurationDTO} specific assertions - Generated by CustomAssertionGenerator.
 *
 * Although this class is not final to allow Soft assertions proxy, if you wish to extend it, 
 * extend {@link AbstractComponentConfigurationDTOAssert} instead.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class ComponentConfigurationDTOAssert extends AbstractComponentConfigurationDTOAssert<ComponentConfigurationDTOAssert, ComponentConfigurationDTO> {

  /**
   * Creates a new <code>{@link ComponentConfigurationDTOAssert}</code> to make assertions on actual ComponentConfigurationDTO.
   * @param actual the ComponentConfigurationDTO we want to make assertions on.
   */
  public ComponentConfigurationDTOAssert(ComponentConfigurationDTO actual) {
    super(actual, ComponentConfigurationDTOAssert.class);
  }

  /**
   * An entry point for ComponentConfigurationDTOAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myComponentConfigurationDTO)</code> and get specific assertion with code completion.
   * @param actual the ComponentConfigurationDTO we want to make assertions on.
   * @return a new <code>{@link ComponentConfigurationDTOAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static ComponentConfigurationDTOAssert assertThat(ComponentConfigurationDTO actual) {
    return new ComponentConfigurationDTOAssert(actual);
  }
}
