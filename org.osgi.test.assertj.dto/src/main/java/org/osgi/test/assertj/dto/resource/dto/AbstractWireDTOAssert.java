package org.osgi.test.assertj.dto.resource.dto;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;
import org.osgi.resource.dto.CapabilityRefDTO;
import org.osgi.resource.dto.RequirementRefDTO;
import org.osgi.resource.dto.WireDTO;

/**
 * Abstract base class for {@link WireDTO} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractWireDTOAssert<S extends AbstractWireDTOAssert<S, A>, A extends WireDTO> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractWireDTOAssert}</code> to make assertions on actual WireDTO.
   * @param actual the WireDTO we want to make assertions on.
   */
  protected AbstractWireDTOAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual WireDTO's capability is equal to the given one.
   * @param capability the given capability to compare the actual WireDTO's capability to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WireDTO's capability is not equal to the given one.
   */
  public S hasCapability(CapabilityRefDTO capability) {
    // check that actual WireDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting capability of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    CapabilityRefDTO actualCapability = actual.capability;
    if (!Objects.areEqual(actualCapability, capability)) {
      failWithMessage(assertjErrorMessage, actual, capability, actualCapability);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WireDTO's provider is equal to the given one.
   * @param provider the given provider to compare the actual WireDTO's provider to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WireDTO's provider is not equal to the given one.
   */
  public S hasProvider(int provider) {
    // check that actual WireDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting provider of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualProvider = actual.provider;
    if (actualProvider != provider) {
      failWithMessage(assertjErrorMessage, actual, provider, actualProvider);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WireDTO's requirement is equal to the given one.
   * @param requirement the given requirement to compare the actual WireDTO's requirement to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WireDTO's requirement is not equal to the given one.
   */
  public S hasRequirement(RequirementRefDTO requirement) {
    // check that actual WireDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting requirement of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    RequirementRefDTO actualRequirement = actual.requirement;
    if (!Objects.areEqual(actualRequirement, requirement)) {
      failWithMessage(assertjErrorMessage, actual, requirement, actualRequirement);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WireDTO's requirer is equal to the given one.
   * @param requirer the given requirer to compare the actual WireDTO's requirer to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WireDTO's requirer is not equal to the given one.
   */
  public S hasRequirer(int requirer) {
    // check that actual WireDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting requirer of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualRequirer = actual.requirer;
    if (actualRequirer != requirer) {
      failWithMessage(assertjErrorMessage, actual, requirer, actualRequirer);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
