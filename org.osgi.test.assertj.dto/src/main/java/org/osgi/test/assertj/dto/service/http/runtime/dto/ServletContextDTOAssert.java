package org.osgi.test.assertj.dto.service.http.runtime.dto;

import org.osgi.service.http.runtime.dto.ServletContextDTO;

/**
 * {@link ServletContextDTO} specific assertions - Generated by CustomAssertionGenerator.
 *
 * Although this class is not final to allow Soft assertions proxy, if you wish to extend it, 
 * extend {@link AbstractServletContextDTOAssert} instead.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class ServletContextDTOAssert extends AbstractServletContextDTOAssert<ServletContextDTOAssert, ServletContextDTO> {

  /**
   * Creates a new <code>{@link ServletContextDTOAssert}</code> to make assertions on actual ServletContextDTO.
   * @param actual the ServletContextDTO we want to make assertions on.
   */
  public ServletContextDTOAssert(ServletContextDTO actual) {
    super(actual, ServletContextDTOAssert.class);
  }

  /**
   * An entry point for ServletContextDTOAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myServletContextDTO)</code> and get specific assertion with code completion.
   * @param actual the ServletContextDTO we want to make assertions on.
   * @return a new <code>{@link ServletContextDTOAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static ServletContextDTOAssert assertThat(ServletContextDTO actual) {
    return new ServletContextDTOAssert(actual);
  }
}
