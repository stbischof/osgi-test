package org.osgi.test.assertj.dto.service.http.runtime.dto;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.api.Assertions;
import org.assertj.core.util.Objects;
import org.osgi.service.http.runtime.dto.FailedErrorPageDTO;
import org.osgi.service.http.runtime.dto.FailedFilterDTO;
import org.osgi.service.http.runtime.dto.FailedListenerDTO;
import org.osgi.service.http.runtime.dto.FailedResourceDTO;
import org.osgi.service.http.runtime.dto.FailedServletContextDTO;
import org.osgi.service.http.runtime.dto.FailedServletDTO;
import org.osgi.service.http.runtime.dto.RuntimeDTO;
import org.osgi.service.http.runtime.dto.ServletContextDTO;

/**
 * Abstract base class for {@link RuntimeDTO} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractRuntimeDTOAssert<S extends AbstractRuntimeDTOAssert<S, A>, A extends RuntimeDTO> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractRuntimeDTOAssert}</code> to make assertions on actual RuntimeDTO.
   * @param actual the RuntimeDTO we want to make assertions on.
   */
  protected AbstractRuntimeDTOAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual RuntimeDTO's failedErrorPageDTOs contains the given FailedErrorPageDTO elements.
   * @param failedErrorPageDTOs the given elements that should be contained in actual RuntimeDTO's failedErrorPageDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual RuntimeDTO's failedErrorPageDTOs does not contain all given FailedErrorPageDTO elements.
   */
  public S hasFailedErrorPageDTOs(FailedErrorPageDTO... failedErrorPageDTOs) {
    // check that actual RuntimeDTO we want to make assertions on is not null.
    isNotNull();

    // check that given FailedErrorPageDTO varargs is not null.
    if (failedErrorPageDTOs == null) failWithMessage("Expecting failedErrorPageDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.failedErrorPageDTOs).contains(failedErrorPageDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RuntimeDTO's failedErrorPageDTOs contains <b>only</b> the given FailedErrorPageDTO elements and nothing else in whatever order.
   *
   * @param failedErrorPageDTOs the given elements that should be contained in actual RuntimeDTO's failedErrorPageDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual RuntimeDTO's failedErrorPageDTOs does not contain all given FailedErrorPageDTO elements and nothing else.
   */
  public S hasOnlyFailedErrorPageDTOs(FailedErrorPageDTO... failedErrorPageDTOs) {
    // check that actual RuntimeDTO we want to make assertions on is not null.
    isNotNull();

    // check that given FailedErrorPageDTO varargs is not null.
    if (failedErrorPageDTOs == null) failWithMessage("Expecting failedErrorPageDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.failedErrorPageDTOs).containsOnly(failedErrorPageDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RuntimeDTO's failedErrorPageDTOs does not contain the given FailedErrorPageDTO elements.
   *
   * @param failedErrorPageDTOs the given elements that should not be in actual RuntimeDTO's failedErrorPageDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual RuntimeDTO's failedErrorPageDTOs contains any given FailedErrorPageDTO elements.
   */
  public S doesNotHaveFailedErrorPageDTOs(FailedErrorPageDTO... failedErrorPageDTOs) {
    // check that actual RuntimeDTO we want to make assertions on is not null.
    isNotNull();

    // check that given FailedErrorPageDTO varargs is not null.
    if (failedErrorPageDTOs == null) failWithMessage("Expecting failedErrorPageDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.failedErrorPageDTOs).doesNotContain(failedErrorPageDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RuntimeDTO has no failedErrorPageDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual RuntimeDTO's failedErrorPageDTOs is not empty.
   */
  public S hasNoFailedErrorPageDTOs() {
    // check that actual RuntimeDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have failedErrorPageDTOs but had :\n  <%s>";

    // check that it is not empty
    if (actual.failedErrorPageDTOs.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.failedErrorPageDTOs));
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual RuntimeDTO's failedFilterDTOs contains the given FailedFilterDTO elements.
   * @param failedFilterDTOs the given elements that should be contained in actual RuntimeDTO's failedFilterDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual RuntimeDTO's failedFilterDTOs does not contain all given FailedFilterDTO elements.
   */
  public S hasFailedFilterDTOs(FailedFilterDTO... failedFilterDTOs) {
    // check that actual RuntimeDTO we want to make assertions on is not null.
    isNotNull();

    // check that given FailedFilterDTO varargs is not null.
    if (failedFilterDTOs == null) failWithMessage("Expecting failedFilterDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.failedFilterDTOs).contains(failedFilterDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RuntimeDTO's failedFilterDTOs contains <b>only</b> the given FailedFilterDTO elements and nothing else in whatever order.
   *
   * @param failedFilterDTOs the given elements that should be contained in actual RuntimeDTO's failedFilterDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual RuntimeDTO's failedFilterDTOs does not contain all given FailedFilterDTO elements and nothing else.
   */
  public S hasOnlyFailedFilterDTOs(FailedFilterDTO... failedFilterDTOs) {
    // check that actual RuntimeDTO we want to make assertions on is not null.
    isNotNull();

    // check that given FailedFilterDTO varargs is not null.
    if (failedFilterDTOs == null) failWithMessage("Expecting failedFilterDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.failedFilterDTOs).containsOnly(failedFilterDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RuntimeDTO's failedFilterDTOs does not contain the given FailedFilterDTO elements.
   *
   * @param failedFilterDTOs the given elements that should not be in actual RuntimeDTO's failedFilterDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual RuntimeDTO's failedFilterDTOs contains any given FailedFilterDTO elements.
   */
  public S doesNotHaveFailedFilterDTOs(FailedFilterDTO... failedFilterDTOs) {
    // check that actual RuntimeDTO we want to make assertions on is not null.
    isNotNull();

    // check that given FailedFilterDTO varargs is not null.
    if (failedFilterDTOs == null) failWithMessage("Expecting failedFilterDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.failedFilterDTOs).doesNotContain(failedFilterDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RuntimeDTO has no failedFilterDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual RuntimeDTO's failedFilterDTOs is not empty.
   */
  public S hasNoFailedFilterDTOs() {
    // check that actual RuntimeDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have failedFilterDTOs but had :\n  <%s>";

    // check that it is not empty
    if (actual.failedFilterDTOs.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.failedFilterDTOs));
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual RuntimeDTO's failedListenerDTOs contains the given FailedListenerDTO elements.
   * @param failedListenerDTOs the given elements that should be contained in actual RuntimeDTO's failedListenerDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual RuntimeDTO's failedListenerDTOs does not contain all given FailedListenerDTO elements.
   */
  public S hasFailedListenerDTOs(FailedListenerDTO... failedListenerDTOs) {
    // check that actual RuntimeDTO we want to make assertions on is not null.
    isNotNull();

    // check that given FailedListenerDTO varargs is not null.
    if (failedListenerDTOs == null) failWithMessage("Expecting failedListenerDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.failedListenerDTOs).contains(failedListenerDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RuntimeDTO's failedListenerDTOs contains <b>only</b> the given FailedListenerDTO elements and nothing else in whatever order.
   *
   * @param failedListenerDTOs the given elements that should be contained in actual RuntimeDTO's failedListenerDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual RuntimeDTO's failedListenerDTOs does not contain all given FailedListenerDTO elements and nothing else.
   */
  public S hasOnlyFailedListenerDTOs(FailedListenerDTO... failedListenerDTOs) {
    // check that actual RuntimeDTO we want to make assertions on is not null.
    isNotNull();

    // check that given FailedListenerDTO varargs is not null.
    if (failedListenerDTOs == null) failWithMessage("Expecting failedListenerDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.failedListenerDTOs).containsOnly(failedListenerDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RuntimeDTO's failedListenerDTOs does not contain the given FailedListenerDTO elements.
   *
   * @param failedListenerDTOs the given elements that should not be in actual RuntimeDTO's failedListenerDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual RuntimeDTO's failedListenerDTOs contains any given FailedListenerDTO elements.
   */
  public S doesNotHaveFailedListenerDTOs(FailedListenerDTO... failedListenerDTOs) {
    // check that actual RuntimeDTO we want to make assertions on is not null.
    isNotNull();

    // check that given FailedListenerDTO varargs is not null.
    if (failedListenerDTOs == null) failWithMessage("Expecting failedListenerDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.failedListenerDTOs).doesNotContain(failedListenerDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RuntimeDTO has no failedListenerDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual RuntimeDTO's failedListenerDTOs is not empty.
   */
  public S hasNoFailedListenerDTOs() {
    // check that actual RuntimeDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have failedListenerDTOs but had :\n  <%s>";

    // check that it is not empty
    if (actual.failedListenerDTOs.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.failedListenerDTOs));
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual RuntimeDTO's failedResourceDTOs contains the given FailedResourceDTO elements.
   * @param failedResourceDTOs the given elements that should be contained in actual RuntimeDTO's failedResourceDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual RuntimeDTO's failedResourceDTOs does not contain all given FailedResourceDTO elements.
   */
  public S hasFailedResourceDTOs(FailedResourceDTO... failedResourceDTOs) {
    // check that actual RuntimeDTO we want to make assertions on is not null.
    isNotNull();

    // check that given FailedResourceDTO varargs is not null.
    if (failedResourceDTOs == null) failWithMessage("Expecting failedResourceDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.failedResourceDTOs).contains(failedResourceDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RuntimeDTO's failedResourceDTOs contains <b>only</b> the given FailedResourceDTO elements and nothing else in whatever order.
   *
   * @param failedResourceDTOs the given elements that should be contained in actual RuntimeDTO's failedResourceDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual RuntimeDTO's failedResourceDTOs does not contain all given FailedResourceDTO elements and nothing else.
   */
  public S hasOnlyFailedResourceDTOs(FailedResourceDTO... failedResourceDTOs) {
    // check that actual RuntimeDTO we want to make assertions on is not null.
    isNotNull();

    // check that given FailedResourceDTO varargs is not null.
    if (failedResourceDTOs == null) failWithMessage("Expecting failedResourceDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.failedResourceDTOs).containsOnly(failedResourceDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RuntimeDTO's failedResourceDTOs does not contain the given FailedResourceDTO elements.
   *
   * @param failedResourceDTOs the given elements that should not be in actual RuntimeDTO's failedResourceDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual RuntimeDTO's failedResourceDTOs contains any given FailedResourceDTO elements.
   */
  public S doesNotHaveFailedResourceDTOs(FailedResourceDTO... failedResourceDTOs) {
    // check that actual RuntimeDTO we want to make assertions on is not null.
    isNotNull();

    // check that given FailedResourceDTO varargs is not null.
    if (failedResourceDTOs == null) failWithMessage("Expecting failedResourceDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.failedResourceDTOs).doesNotContain(failedResourceDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RuntimeDTO has no failedResourceDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual RuntimeDTO's failedResourceDTOs is not empty.
   */
  public S hasNoFailedResourceDTOs() {
    // check that actual RuntimeDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have failedResourceDTOs but had :\n  <%s>";

    // check that it is not empty
    if (actual.failedResourceDTOs.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.failedResourceDTOs));
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual RuntimeDTO's failedServletContextDTOs contains the given FailedServletContextDTO elements.
   * @param failedServletContextDTOs the given elements that should be contained in actual RuntimeDTO's failedServletContextDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual RuntimeDTO's failedServletContextDTOs does not contain all given FailedServletContextDTO elements.
   */
  public S hasFailedServletContextDTOs(FailedServletContextDTO... failedServletContextDTOs) {
    // check that actual RuntimeDTO we want to make assertions on is not null.
    isNotNull();

    // check that given FailedServletContextDTO varargs is not null.
    if (failedServletContextDTOs == null) failWithMessage("Expecting failedServletContextDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.failedServletContextDTOs).contains(failedServletContextDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RuntimeDTO's failedServletContextDTOs contains <b>only</b> the given FailedServletContextDTO elements and nothing else in whatever order.
   *
   * @param failedServletContextDTOs the given elements that should be contained in actual RuntimeDTO's failedServletContextDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual RuntimeDTO's failedServletContextDTOs does not contain all given FailedServletContextDTO elements and nothing else.
   */
  public S hasOnlyFailedServletContextDTOs(FailedServletContextDTO... failedServletContextDTOs) {
    // check that actual RuntimeDTO we want to make assertions on is not null.
    isNotNull();

    // check that given FailedServletContextDTO varargs is not null.
    if (failedServletContextDTOs == null) failWithMessage("Expecting failedServletContextDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.failedServletContextDTOs).containsOnly(failedServletContextDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RuntimeDTO's failedServletContextDTOs does not contain the given FailedServletContextDTO elements.
   *
   * @param failedServletContextDTOs the given elements that should not be in actual RuntimeDTO's failedServletContextDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual RuntimeDTO's failedServletContextDTOs contains any given FailedServletContextDTO elements.
   */
  public S doesNotHaveFailedServletContextDTOs(FailedServletContextDTO... failedServletContextDTOs) {
    // check that actual RuntimeDTO we want to make assertions on is not null.
    isNotNull();

    // check that given FailedServletContextDTO varargs is not null.
    if (failedServletContextDTOs == null) failWithMessage("Expecting failedServletContextDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.failedServletContextDTOs).doesNotContain(failedServletContextDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RuntimeDTO has no failedServletContextDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual RuntimeDTO's failedServletContextDTOs is not empty.
   */
  public S hasNoFailedServletContextDTOs() {
    // check that actual RuntimeDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have failedServletContextDTOs but had :\n  <%s>";

    // check that it is not empty
    if (actual.failedServletContextDTOs.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.failedServletContextDTOs));
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual RuntimeDTO's failedServletDTOs contains the given FailedServletDTO elements.
   * @param failedServletDTOs the given elements that should be contained in actual RuntimeDTO's failedServletDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual RuntimeDTO's failedServletDTOs does not contain all given FailedServletDTO elements.
   */
  public S hasFailedServletDTOs(FailedServletDTO... failedServletDTOs) {
    // check that actual RuntimeDTO we want to make assertions on is not null.
    isNotNull();

    // check that given FailedServletDTO varargs is not null.
    if (failedServletDTOs == null) failWithMessage("Expecting failedServletDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.failedServletDTOs).contains(failedServletDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RuntimeDTO's failedServletDTOs contains <b>only</b> the given FailedServletDTO elements and nothing else in whatever order.
   *
   * @param failedServletDTOs the given elements that should be contained in actual RuntimeDTO's failedServletDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual RuntimeDTO's failedServletDTOs does not contain all given FailedServletDTO elements and nothing else.
   */
  public S hasOnlyFailedServletDTOs(FailedServletDTO... failedServletDTOs) {
    // check that actual RuntimeDTO we want to make assertions on is not null.
    isNotNull();

    // check that given FailedServletDTO varargs is not null.
    if (failedServletDTOs == null) failWithMessage("Expecting failedServletDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.failedServletDTOs).containsOnly(failedServletDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RuntimeDTO's failedServletDTOs does not contain the given FailedServletDTO elements.
   *
   * @param failedServletDTOs the given elements that should not be in actual RuntimeDTO's failedServletDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual RuntimeDTO's failedServletDTOs contains any given FailedServletDTO elements.
   */
  public S doesNotHaveFailedServletDTOs(FailedServletDTO... failedServletDTOs) {
    // check that actual RuntimeDTO we want to make assertions on is not null.
    isNotNull();

    // check that given FailedServletDTO varargs is not null.
    if (failedServletDTOs == null) failWithMessage("Expecting failedServletDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.failedServletDTOs).doesNotContain(failedServletDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RuntimeDTO has no failedServletDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual RuntimeDTO's failedServletDTOs is not empty.
   */
  public S hasNoFailedServletDTOs() {
    // check that actual RuntimeDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have failedServletDTOs but had :\n  <%s>";

    // check that it is not empty
    if (actual.failedServletDTOs.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.failedServletDTOs));
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual RuntimeDTO's serviceDTO is equal to the given one.
   * @param serviceDTO the given serviceDTO to compare the actual RuntimeDTO's serviceDTO to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RuntimeDTO's serviceDTO is not equal to the given one.
   */
  public S hasServiceDTO(org.osgi.framework.dto.ServiceReferenceDTO serviceDTO) {
    // check that actual RuntimeDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting serviceDTO of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.osgi.framework.dto.ServiceReferenceDTO actualServiceDTO = actual.serviceDTO;
    if (!Objects.areEqual(actualServiceDTO, serviceDTO)) {
      failWithMessage(assertjErrorMessage, actual, serviceDTO, actualServiceDTO);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RuntimeDTO's servletContextDTOs contains the given ServletContextDTO elements.
   * @param servletContextDTOs the given elements that should be contained in actual RuntimeDTO's servletContextDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual RuntimeDTO's servletContextDTOs does not contain all given ServletContextDTO elements.
   */
  public S hasServletContextDTOs(ServletContextDTO... servletContextDTOs) {
    // check that actual RuntimeDTO we want to make assertions on is not null.
    isNotNull();

    // check that given ServletContextDTO varargs is not null.
    if (servletContextDTOs == null) failWithMessage("Expecting servletContextDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.servletContextDTOs).contains(servletContextDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RuntimeDTO's servletContextDTOs contains <b>only</b> the given ServletContextDTO elements and nothing else in whatever order.
   *
   * @param servletContextDTOs the given elements that should be contained in actual RuntimeDTO's servletContextDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual RuntimeDTO's servletContextDTOs does not contain all given ServletContextDTO elements and nothing else.
   */
  public S hasOnlyServletContextDTOs(ServletContextDTO... servletContextDTOs) {
    // check that actual RuntimeDTO we want to make assertions on is not null.
    isNotNull();

    // check that given ServletContextDTO varargs is not null.
    if (servletContextDTOs == null) failWithMessage("Expecting servletContextDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.servletContextDTOs).containsOnly(servletContextDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RuntimeDTO's servletContextDTOs does not contain the given ServletContextDTO elements.
   *
   * @param servletContextDTOs the given elements that should not be in actual RuntimeDTO's servletContextDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual RuntimeDTO's servletContextDTOs contains any given ServletContextDTO elements.
   */
  public S doesNotHaveServletContextDTOs(ServletContextDTO... servletContextDTOs) {
    // check that actual RuntimeDTO we want to make assertions on is not null.
    isNotNull();

    // check that given ServletContextDTO varargs is not null.
    if (servletContextDTOs == null) failWithMessage("Expecting servletContextDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.servletContextDTOs).doesNotContain(servletContextDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RuntimeDTO has no servletContextDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual RuntimeDTO's servletContextDTOs is not empty.
   */
  public S hasNoServletContextDTOs() {
    // check that actual RuntimeDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have servletContextDTOs but had :\n  <%s>";

    // check that it is not empty
    if (actual.servletContextDTOs.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.servletContextDTOs));
    }

    // return the current assertion for method chaining
    return myself;
  }


}
