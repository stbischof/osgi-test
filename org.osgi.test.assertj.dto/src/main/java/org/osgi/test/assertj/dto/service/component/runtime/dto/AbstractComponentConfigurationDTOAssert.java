package org.osgi.test.assertj.dto.service.component.runtime.dto;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.api.Assertions;
import org.assertj.core.util.Objects;
import org.osgi.service.component.runtime.dto.ComponentConfigurationDTO;
import org.osgi.service.component.runtime.dto.ComponentDescriptionDTO;
import org.osgi.service.component.runtime.dto.SatisfiedReferenceDTO;
import org.osgi.service.component.runtime.dto.UnsatisfiedReferenceDTO;

/**
 * Abstract base class for {@link ComponentConfigurationDTO} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractComponentConfigurationDTOAssert<S extends AbstractComponentConfigurationDTOAssert<S, A>, A extends ComponentConfigurationDTO> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractComponentConfigurationDTOAssert}</code> to make assertions on actual ComponentConfigurationDTO.
   * @param actual the ComponentConfigurationDTO we want to make assertions on.
   */
  protected AbstractComponentConfigurationDTOAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual ComponentConfigurationDTO's description is equal to the given one.
   * @param description the given description to compare the actual ComponentConfigurationDTO's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ComponentConfigurationDTO's description is not equal to the given one.
   */
  public S hasDescription(ComponentDescriptionDTO description) {
    // check that actual ComponentConfigurationDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    ComponentDescriptionDTO actualDescription = actual.description;
    if (!Objects.areEqual(actualDescription, description)) {
      failWithMessage(assertjErrorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ComponentConfigurationDTO's id is equal to the given one.
   * @param id the given id to compare the actual ComponentConfigurationDTO's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ComponentConfigurationDTO's id is not equal to the given one.
   */
  public S hasId(long id) {
    // check that actual ComponentConfigurationDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    long actualId = actual.id;
    if (actualId != id) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ComponentConfigurationDTO's properties is equal to the given one.
   * @param properties the given properties to compare the actual ComponentConfigurationDTO's properties to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ComponentConfigurationDTO's properties is not equal to the given one.
   */
  public S hasProperties(java.util.Map properties) {
    // check that actual ComponentConfigurationDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting properties of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Map actualProperties = actual.properties;
    if (!Objects.areEqual(actualProperties, properties)) {
      failWithMessage(assertjErrorMessage, actual, properties, actualProperties);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ComponentConfigurationDTO's satisfiedReferences contains the given SatisfiedReferenceDTO elements.
   * @param satisfiedReferences the given elements that should be contained in actual ComponentConfigurationDTO's satisfiedReferences.
   * @return this assertion object.
   * @throws AssertionError if the actual ComponentConfigurationDTO's satisfiedReferences does not contain all given SatisfiedReferenceDTO elements.
   */
  public S hasSatisfiedReferences(SatisfiedReferenceDTO... satisfiedReferences) {
    // check that actual ComponentConfigurationDTO we want to make assertions on is not null.
    isNotNull();

    // check that given SatisfiedReferenceDTO varargs is not null.
    if (satisfiedReferences == null) failWithMessage("Expecting satisfiedReferences parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.satisfiedReferences).contains(satisfiedReferences);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ComponentConfigurationDTO's satisfiedReferences contains <b>only</b> the given SatisfiedReferenceDTO elements and nothing else in whatever order.
   *
   * @param satisfiedReferences the given elements that should be contained in actual ComponentConfigurationDTO's satisfiedReferences.
   * @return this assertion object.
   * @throws AssertionError if the actual ComponentConfigurationDTO's satisfiedReferences does not contain all given SatisfiedReferenceDTO elements and nothing else.
   */
  public S hasOnlySatisfiedReferences(SatisfiedReferenceDTO... satisfiedReferences) {
    // check that actual ComponentConfigurationDTO we want to make assertions on is not null.
    isNotNull();

    // check that given SatisfiedReferenceDTO varargs is not null.
    if (satisfiedReferences == null) failWithMessage("Expecting satisfiedReferences parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.satisfiedReferences).containsOnly(satisfiedReferences);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ComponentConfigurationDTO's satisfiedReferences does not contain the given SatisfiedReferenceDTO elements.
   *
   * @param satisfiedReferences the given elements that should not be in actual ComponentConfigurationDTO's satisfiedReferences.
   * @return this assertion object.
   * @throws AssertionError if the actual ComponentConfigurationDTO's satisfiedReferences contains any given SatisfiedReferenceDTO elements.
   */
  public S doesNotHaveSatisfiedReferences(SatisfiedReferenceDTO... satisfiedReferences) {
    // check that actual ComponentConfigurationDTO we want to make assertions on is not null.
    isNotNull();

    // check that given SatisfiedReferenceDTO varargs is not null.
    if (satisfiedReferences == null) failWithMessage("Expecting satisfiedReferences parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.satisfiedReferences).doesNotContain(satisfiedReferences);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ComponentConfigurationDTO has no satisfiedReferences.
   * @return this assertion object.
   * @throws AssertionError if the actual ComponentConfigurationDTO's satisfiedReferences is not empty.
   */
  public S hasNoSatisfiedReferences() {
    // check that actual ComponentConfigurationDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have satisfiedReferences but had :\n  <%s>";

    // check that it is not empty
    if (actual.satisfiedReferences.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.satisfiedReferences));
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual ComponentConfigurationDTO's state is equal to the given one.
   * @param state the given state to compare the actual ComponentConfigurationDTO's state to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ComponentConfigurationDTO's state is not equal to the given one.
   */
  public S hasState(int state) {
    // check that actual ComponentConfigurationDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting state of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualState = actual.state;
    if (actualState != state) {
      failWithMessage(assertjErrorMessage, actual, state, actualState);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ComponentConfigurationDTO's unsatisfiedReferences contains the given UnsatisfiedReferenceDTO elements.
   * @param unsatisfiedReferences the given elements that should be contained in actual ComponentConfigurationDTO's unsatisfiedReferences.
   * @return this assertion object.
   * @throws AssertionError if the actual ComponentConfigurationDTO's unsatisfiedReferences does not contain all given UnsatisfiedReferenceDTO elements.
   */
  public S hasUnsatisfiedReferences(UnsatisfiedReferenceDTO... unsatisfiedReferences) {
    // check that actual ComponentConfigurationDTO we want to make assertions on is not null.
    isNotNull();

    // check that given UnsatisfiedReferenceDTO varargs is not null.
    if (unsatisfiedReferences == null) failWithMessage("Expecting unsatisfiedReferences parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.unsatisfiedReferences).contains(unsatisfiedReferences);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ComponentConfigurationDTO's unsatisfiedReferences contains <b>only</b> the given UnsatisfiedReferenceDTO elements and nothing else in whatever order.
   *
   * @param unsatisfiedReferences the given elements that should be contained in actual ComponentConfigurationDTO's unsatisfiedReferences.
   * @return this assertion object.
   * @throws AssertionError if the actual ComponentConfigurationDTO's unsatisfiedReferences does not contain all given UnsatisfiedReferenceDTO elements and nothing else.
   */
  public S hasOnlyUnsatisfiedReferences(UnsatisfiedReferenceDTO... unsatisfiedReferences) {
    // check that actual ComponentConfigurationDTO we want to make assertions on is not null.
    isNotNull();

    // check that given UnsatisfiedReferenceDTO varargs is not null.
    if (unsatisfiedReferences == null) failWithMessage("Expecting unsatisfiedReferences parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.unsatisfiedReferences).containsOnly(unsatisfiedReferences);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ComponentConfigurationDTO's unsatisfiedReferences does not contain the given UnsatisfiedReferenceDTO elements.
   *
   * @param unsatisfiedReferences the given elements that should not be in actual ComponentConfigurationDTO's unsatisfiedReferences.
   * @return this assertion object.
   * @throws AssertionError if the actual ComponentConfigurationDTO's unsatisfiedReferences contains any given UnsatisfiedReferenceDTO elements.
   */
  public S doesNotHaveUnsatisfiedReferences(UnsatisfiedReferenceDTO... unsatisfiedReferences) {
    // check that actual ComponentConfigurationDTO we want to make assertions on is not null.
    isNotNull();

    // check that given UnsatisfiedReferenceDTO varargs is not null.
    if (unsatisfiedReferences == null) failWithMessage("Expecting unsatisfiedReferences parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.unsatisfiedReferences).doesNotContain(unsatisfiedReferences);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ComponentConfigurationDTO has no unsatisfiedReferences.
   * @return this assertion object.
   * @throws AssertionError if the actual ComponentConfigurationDTO's unsatisfiedReferences is not empty.
   */
  public S hasNoUnsatisfiedReferences() {
    // check that actual ComponentConfigurationDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have unsatisfiedReferences but had :\n  <%s>";

    // check that it is not empty
    if (actual.unsatisfiedReferences.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.unsatisfiedReferences));
    }

    // return the current assertion for method chaining
    return myself;
  }


}
