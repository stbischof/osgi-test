package org.osgi.test.assertj.dto.framework.startlevel.dto;

import org.assertj.core.api.AbstractObjectAssert;
import org.osgi.framework.startlevel.dto.BundleStartLevelDTO;

/**
 * Abstract base class for {@link BundleStartLevelDTO} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractBundleStartLevelDTOAssert<S extends AbstractBundleStartLevelDTOAssert<S, A>, A extends BundleStartLevelDTO> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractBundleStartLevelDTOAssert}</code> to make assertions on actual BundleStartLevelDTO.
   * @param actual the BundleStartLevelDTO we want to make assertions on.
   */
  protected AbstractBundleStartLevelDTOAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual BundleStartLevelDTO is activationPolicyUsed.
   * @return this assertion object.
   * @throws AssertionError - if the actual BundleStartLevelDTO is not activationPolicyUsed.
   */
  public S isActivationPolicyUsed() {
    // check that actual BundleStartLevelDTO we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.activationPolicyUsed) {
      failWithMessage("\nExpecting that actual BundleStartLevelDTO is activationPolicyUsed but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BundleStartLevelDTO is not activationPolicyUsed.
   * @return this assertion object.
   * @throws AssertionError - if the actual BundleStartLevelDTO is activationPolicyUsed.
   */
  public S isNotActivationPolicyUsed() {
    // check that actual BundleStartLevelDTO we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.activationPolicyUsed) {
      failWithMessage("\nExpecting that actual BundleStartLevelDTO is not activationPolicyUsed but is.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BundleStartLevelDTO's bundle is equal to the given one.
   * @param bundle the given bundle to compare the actual BundleStartLevelDTO's bundle to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BundleStartLevelDTO's bundle is not equal to the given one.
   */
  public S hasBundle(long bundle) {
    // check that actual BundleStartLevelDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting bundle of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    long actualBundle = actual.bundle;
    if (actualBundle != bundle) {
      failWithMessage(assertjErrorMessage, actual, bundle, actualBundle);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BundleStartLevelDTO is persistentlyStarted.
   * @return this assertion object.
   * @throws AssertionError - if the actual BundleStartLevelDTO is not persistentlyStarted.
   */
  public S isPersistentlyStarted() {
    // check that actual BundleStartLevelDTO we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.persistentlyStarted) {
      failWithMessage("\nExpecting that actual BundleStartLevelDTO is persistentlyStarted but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BundleStartLevelDTO is not persistentlyStarted.
   * @return this assertion object.
   * @throws AssertionError - if the actual BundleStartLevelDTO is persistentlyStarted.
   */
  public S isNotPersistentlyStarted() {
    // check that actual BundleStartLevelDTO we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.persistentlyStarted) {
      failWithMessage("\nExpecting that actual BundleStartLevelDTO is not persistentlyStarted but is.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BundleStartLevelDTO's startLevel is equal to the given one.
   * @param startLevel the given startLevel to compare the actual BundleStartLevelDTO's startLevel to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BundleStartLevelDTO's startLevel is not equal to the given one.
   */
  public S hasStartLevel(int startLevel) {
    // check that actual BundleStartLevelDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting startLevel of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualStartLevel = actual.startLevel;
    if (actualStartLevel != startLevel) {
      failWithMessage(assertjErrorMessage, actual, startLevel, actualStartLevel);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
