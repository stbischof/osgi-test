package org.osgi.test.assertj.dto.service.http.runtime.dto;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.api.Assertions;
import org.assertj.core.util.Objects;
import org.osgi.service.http.runtime.dto.ErrorPageDTO;
import org.osgi.service.http.runtime.dto.FilterDTO;
import org.osgi.service.http.runtime.dto.ListenerDTO;
import org.osgi.service.http.runtime.dto.ResourceDTO;
import org.osgi.service.http.runtime.dto.ServletContextDTO;
import org.osgi.service.http.runtime.dto.ServletDTO;

/**
 * Abstract base class for {@link ServletContextDTO} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractServletContextDTOAssert<S extends AbstractServletContextDTOAssert<S, A>, A extends ServletContextDTO> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractServletContextDTOAssert}</code> to make assertions on actual ServletContextDTO.
   * @param actual the ServletContextDTO we want to make assertions on.
   */
  protected AbstractServletContextDTOAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual ServletContextDTO's attributes is equal to the given one.
   * @param attributes the given attributes to compare the actual ServletContextDTO's attributes to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ServletContextDTO's attributes is not equal to the given one.
   */
  public S hasAttributes(java.util.Map attributes) {
    // check that actual ServletContextDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting attributes of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Map actualAttributes = actual.attributes;
    if (!Objects.areEqual(actualAttributes, attributes)) {
      failWithMessage(assertjErrorMessage, actual, attributes, actualAttributes);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ServletContextDTO's contextPath is equal to the given one.
   * @param contextPath the given contextPath to compare the actual ServletContextDTO's contextPath to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ServletContextDTO's contextPath is not equal to the given one.
   */
  public S hasContextPath(String contextPath) {
    // check that actual ServletContextDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting contextPath of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualContextPath = actual.contextPath;
    if (!Objects.areEqual(actualContextPath, contextPath)) {
      failWithMessage(assertjErrorMessage, actual, contextPath, actualContextPath);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ServletContextDTO's errorPageDTOs contains the given ErrorPageDTO elements.
   * @param errorPageDTOs the given elements that should be contained in actual ServletContextDTO's errorPageDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual ServletContextDTO's errorPageDTOs does not contain all given ErrorPageDTO elements.
   */
  public S hasErrorPageDTOs(ErrorPageDTO... errorPageDTOs) {
    // check that actual ServletContextDTO we want to make assertions on is not null.
    isNotNull();

    // check that given ErrorPageDTO varargs is not null.
    if (errorPageDTOs == null) failWithMessage("Expecting errorPageDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.errorPageDTOs).contains(errorPageDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ServletContextDTO's errorPageDTOs contains <b>only</b> the given ErrorPageDTO elements and nothing else in whatever order.
   *
   * @param errorPageDTOs the given elements that should be contained in actual ServletContextDTO's errorPageDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual ServletContextDTO's errorPageDTOs does not contain all given ErrorPageDTO elements and nothing else.
   */
  public S hasOnlyErrorPageDTOs(ErrorPageDTO... errorPageDTOs) {
    // check that actual ServletContextDTO we want to make assertions on is not null.
    isNotNull();

    // check that given ErrorPageDTO varargs is not null.
    if (errorPageDTOs == null) failWithMessage("Expecting errorPageDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.errorPageDTOs).containsOnly(errorPageDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ServletContextDTO's errorPageDTOs does not contain the given ErrorPageDTO elements.
   *
   * @param errorPageDTOs the given elements that should not be in actual ServletContextDTO's errorPageDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual ServletContextDTO's errorPageDTOs contains any given ErrorPageDTO elements.
   */
  public S doesNotHaveErrorPageDTOs(ErrorPageDTO... errorPageDTOs) {
    // check that actual ServletContextDTO we want to make assertions on is not null.
    isNotNull();

    // check that given ErrorPageDTO varargs is not null.
    if (errorPageDTOs == null) failWithMessage("Expecting errorPageDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.errorPageDTOs).doesNotContain(errorPageDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ServletContextDTO has no errorPageDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual ServletContextDTO's errorPageDTOs is not empty.
   */
  public S hasNoErrorPageDTOs() {
    // check that actual ServletContextDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have errorPageDTOs but had :\n  <%s>";

    // check that it is not empty
    if (actual.errorPageDTOs.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.errorPageDTOs));
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual ServletContextDTO's filterDTOs contains the given FilterDTO elements.
   * @param filterDTOs the given elements that should be contained in actual ServletContextDTO's filterDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual ServletContextDTO's filterDTOs does not contain all given FilterDTO elements.
   */
  public S hasFilterDTOs(FilterDTO... filterDTOs) {
    // check that actual ServletContextDTO we want to make assertions on is not null.
    isNotNull();

    // check that given FilterDTO varargs is not null.
    if (filterDTOs == null) failWithMessage("Expecting filterDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.filterDTOs).contains(filterDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ServletContextDTO's filterDTOs contains <b>only</b> the given FilterDTO elements and nothing else in whatever order.
   *
   * @param filterDTOs the given elements that should be contained in actual ServletContextDTO's filterDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual ServletContextDTO's filterDTOs does not contain all given FilterDTO elements and nothing else.
   */
  public S hasOnlyFilterDTOs(FilterDTO... filterDTOs) {
    // check that actual ServletContextDTO we want to make assertions on is not null.
    isNotNull();

    // check that given FilterDTO varargs is not null.
    if (filterDTOs == null) failWithMessage("Expecting filterDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.filterDTOs).containsOnly(filterDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ServletContextDTO's filterDTOs does not contain the given FilterDTO elements.
   *
   * @param filterDTOs the given elements that should not be in actual ServletContextDTO's filterDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual ServletContextDTO's filterDTOs contains any given FilterDTO elements.
   */
  public S doesNotHaveFilterDTOs(FilterDTO... filterDTOs) {
    // check that actual ServletContextDTO we want to make assertions on is not null.
    isNotNull();

    // check that given FilterDTO varargs is not null.
    if (filterDTOs == null) failWithMessage("Expecting filterDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.filterDTOs).doesNotContain(filterDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ServletContextDTO has no filterDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual ServletContextDTO's filterDTOs is not empty.
   */
  public S hasNoFilterDTOs() {
    // check that actual ServletContextDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have filterDTOs but had :\n  <%s>";

    // check that it is not empty
    if (actual.filterDTOs.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.filterDTOs));
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual ServletContextDTO's initParams is equal to the given one.
   * @param initParams the given initParams to compare the actual ServletContextDTO's initParams to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ServletContextDTO's initParams is not equal to the given one.
   */
  public S hasInitParams(java.util.Map initParams) {
    // check that actual ServletContextDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting initParams of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Map actualInitParams = actual.initParams;
    if (!Objects.areEqual(actualInitParams, initParams)) {
      failWithMessage(assertjErrorMessage, actual, initParams, actualInitParams);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ServletContextDTO's listenerDTOs contains the given ListenerDTO elements.
   * @param listenerDTOs the given elements that should be contained in actual ServletContextDTO's listenerDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual ServletContextDTO's listenerDTOs does not contain all given ListenerDTO elements.
   */
  public S hasListenerDTOs(ListenerDTO... listenerDTOs) {
    // check that actual ServletContextDTO we want to make assertions on is not null.
    isNotNull();

    // check that given ListenerDTO varargs is not null.
    if (listenerDTOs == null) failWithMessage("Expecting listenerDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.listenerDTOs).contains(listenerDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ServletContextDTO's listenerDTOs contains <b>only</b> the given ListenerDTO elements and nothing else in whatever order.
   *
   * @param listenerDTOs the given elements that should be contained in actual ServletContextDTO's listenerDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual ServletContextDTO's listenerDTOs does not contain all given ListenerDTO elements and nothing else.
   */
  public S hasOnlyListenerDTOs(ListenerDTO... listenerDTOs) {
    // check that actual ServletContextDTO we want to make assertions on is not null.
    isNotNull();

    // check that given ListenerDTO varargs is not null.
    if (listenerDTOs == null) failWithMessage("Expecting listenerDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.listenerDTOs).containsOnly(listenerDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ServletContextDTO's listenerDTOs does not contain the given ListenerDTO elements.
   *
   * @param listenerDTOs the given elements that should not be in actual ServletContextDTO's listenerDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual ServletContextDTO's listenerDTOs contains any given ListenerDTO elements.
   */
  public S doesNotHaveListenerDTOs(ListenerDTO... listenerDTOs) {
    // check that actual ServletContextDTO we want to make assertions on is not null.
    isNotNull();

    // check that given ListenerDTO varargs is not null.
    if (listenerDTOs == null) failWithMessage("Expecting listenerDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.listenerDTOs).doesNotContain(listenerDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ServletContextDTO has no listenerDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual ServletContextDTO's listenerDTOs is not empty.
   */
  public S hasNoListenerDTOs() {
    // check that actual ServletContextDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have listenerDTOs but had :\n  <%s>";

    // check that it is not empty
    if (actual.listenerDTOs.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.listenerDTOs));
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual ServletContextDTO's name is equal to the given one.
   * @param name the given name to compare the actual ServletContextDTO's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ServletContextDTO's name is not equal to the given one.
   */
  public S hasName(String name) {
    // check that actual ServletContextDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualName = actual.name;
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ServletContextDTO's resourceDTOs contains the given ResourceDTO elements.
   * @param resourceDTOs the given elements that should be contained in actual ServletContextDTO's resourceDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual ServletContextDTO's resourceDTOs does not contain all given ResourceDTO elements.
   */
  public S hasResourceDTOs(ResourceDTO... resourceDTOs) {
    // check that actual ServletContextDTO we want to make assertions on is not null.
    isNotNull();

    // check that given ResourceDTO varargs is not null.
    if (resourceDTOs == null) failWithMessage("Expecting resourceDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.resourceDTOs).contains(resourceDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ServletContextDTO's resourceDTOs contains <b>only</b> the given ResourceDTO elements and nothing else in whatever order.
   *
   * @param resourceDTOs the given elements that should be contained in actual ServletContextDTO's resourceDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual ServletContextDTO's resourceDTOs does not contain all given ResourceDTO elements and nothing else.
   */
  public S hasOnlyResourceDTOs(ResourceDTO... resourceDTOs) {
    // check that actual ServletContextDTO we want to make assertions on is not null.
    isNotNull();

    // check that given ResourceDTO varargs is not null.
    if (resourceDTOs == null) failWithMessage("Expecting resourceDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.resourceDTOs).containsOnly(resourceDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ServletContextDTO's resourceDTOs does not contain the given ResourceDTO elements.
   *
   * @param resourceDTOs the given elements that should not be in actual ServletContextDTO's resourceDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual ServletContextDTO's resourceDTOs contains any given ResourceDTO elements.
   */
  public S doesNotHaveResourceDTOs(ResourceDTO... resourceDTOs) {
    // check that actual ServletContextDTO we want to make assertions on is not null.
    isNotNull();

    // check that given ResourceDTO varargs is not null.
    if (resourceDTOs == null) failWithMessage("Expecting resourceDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.resourceDTOs).doesNotContain(resourceDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ServletContextDTO has no resourceDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual ServletContextDTO's resourceDTOs is not empty.
   */
  public S hasNoResourceDTOs() {
    // check that actual ServletContextDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have resourceDTOs but had :\n  <%s>";

    // check that it is not empty
    if (actual.resourceDTOs.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.resourceDTOs));
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual ServletContextDTO's serviceId is equal to the given one.
   * @param serviceId the given serviceId to compare the actual ServletContextDTO's serviceId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ServletContextDTO's serviceId is not equal to the given one.
   */
  public S hasServiceId(long serviceId) {
    // check that actual ServletContextDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting serviceId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    long actualServiceId = actual.serviceId;
    if (actualServiceId != serviceId) {
      failWithMessage(assertjErrorMessage, actual, serviceId, actualServiceId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ServletContextDTO's servletDTOs contains the given ServletDTO elements.
   * @param servletDTOs the given elements that should be contained in actual ServletContextDTO's servletDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual ServletContextDTO's servletDTOs does not contain all given ServletDTO elements.
   */
  public S hasServletDTOs(ServletDTO... servletDTOs) {
    // check that actual ServletContextDTO we want to make assertions on is not null.
    isNotNull();

    // check that given ServletDTO varargs is not null.
    if (servletDTOs == null) failWithMessage("Expecting servletDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.servletDTOs).contains(servletDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ServletContextDTO's servletDTOs contains <b>only</b> the given ServletDTO elements and nothing else in whatever order.
   *
   * @param servletDTOs the given elements that should be contained in actual ServletContextDTO's servletDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual ServletContextDTO's servletDTOs does not contain all given ServletDTO elements and nothing else.
   */
  public S hasOnlyServletDTOs(ServletDTO... servletDTOs) {
    // check that actual ServletContextDTO we want to make assertions on is not null.
    isNotNull();

    // check that given ServletDTO varargs is not null.
    if (servletDTOs == null) failWithMessage("Expecting servletDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.servletDTOs).containsOnly(servletDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ServletContextDTO's servletDTOs does not contain the given ServletDTO elements.
   *
   * @param servletDTOs the given elements that should not be in actual ServletContextDTO's servletDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual ServletContextDTO's servletDTOs contains any given ServletDTO elements.
   */
  public S doesNotHaveServletDTOs(ServletDTO... servletDTOs) {
    // check that actual ServletContextDTO we want to make assertions on is not null.
    isNotNull();

    // check that given ServletDTO varargs is not null.
    if (servletDTOs == null) failWithMessage("Expecting servletDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.servletDTOs).doesNotContain(servletDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ServletContextDTO has no servletDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual ServletContextDTO's servletDTOs is not empty.
   */
  public S hasNoServletDTOs() {
    // check that actual ServletContextDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have servletDTOs but had :\n  <%s>";

    // check that it is not empty
    if (actual.servletDTOs.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.servletDTOs));
    }

    // return the current assertion for method chaining
    return myself;
  }


}
