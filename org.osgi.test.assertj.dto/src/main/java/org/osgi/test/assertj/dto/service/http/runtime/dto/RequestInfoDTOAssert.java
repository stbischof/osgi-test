package org.osgi.test.assertj.dto.service.http.runtime.dto;

import org.osgi.service.http.runtime.dto.RequestInfoDTO;

/**
 * {@link RequestInfoDTO} specific assertions - Generated by CustomAssertionGenerator.
 *
 * Although this class is not final to allow Soft assertions proxy, if you wish to extend it, 
 * extend {@link AbstractRequestInfoDTOAssert} instead.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class RequestInfoDTOAssert extends AbstractRequestInfoDTOAssert<RequestInfoDTOAssert, RequestInfoDTO> {

  /**
   * Creates a new <code>{@link RequestInfoDTOAssert}</code> to make assertions on actual RequestInfoDTO.
   * @param actual the RequestInfoDTO we want to make assertions on.
   */
  public RequestInfoDTOAssert(RequestInfoDTO actual) {
    super(actual, RequestInfoDTOAssert.class);
  }

  /**
   * An entry point for RequestInfoDTOAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myRequestInfoDTO)</code> and get specific assertion with code completion.
   * @param actual the RequestInfoDTO we want to make assertions on.
   * @return a new <code>{@link RequestInfoDTOAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static RequestInfoDTOAssert assertThat(RequestInfoDTO actual) {
    return new RequestInfoDTOAssert(actual);
  }
}
