package org.osgi.test.assertj.dto.service.http.runtime.dto;

import org.osgi.service.http.runtime.dto.FailedServletDTO;

/**
 * Abstract base class for {@link FailedServletDTO} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractFailedServletDTOAssert<S extends AbstractFailedServletDTOAssert<S, A>, A extends FailedServletDTO> extends AbstractServletDTOAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractFailedServletDTOAssert}</code> to make assertions on actual FailedServletDTO.
   * @param actual the FailedServletDTO we want to make assertions on.
   */
  protected AbstractFailedServletDTOAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual FailedServletDTO's failureReason is equal to the given one.
   * @param failureReason the given failureReason to compare the actual FailedServletDTO's failureReason to.
   * @return this assertion object.
   * @throws AssertionError - if the actual FailedServletDTO's failureReason is not equal to the given one.
   */
  public S hasFailureReason(int failureReason) {
    // check that actual FailedServletDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting failureReason of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualFailureReason = actual.failureReason;
    if (actualFailureReason != failureReason) {
      failWithMessage(assertjErrorMessage, actual, failureReason, actualFailureReason);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
