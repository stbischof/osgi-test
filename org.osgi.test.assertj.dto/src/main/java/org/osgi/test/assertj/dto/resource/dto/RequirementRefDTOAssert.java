package org.osgi.test.assertj.dto.resource.dto;

import org.osgi.resource.dto.RequirementRefDTO;

/**
 * {@link RequirementRefDTO} specific assertions - Generated by CustomAssertionGenerator.
 *
 * Although this class is not final to allow Soft assertions proxy, if you wish to extend it, 
 * extend {@link AbstractRequirementRefDTOAssert} instead.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class RequirementRefDTOAssert extends AbstractRequirementRefDTOAssert<RequirementRefDTOAssert, RequirementRefDTO> {

  /**
   * Creates a new <code>{@link RequirementRefDTOAssert}</code> to make assertions on actual RequirementRefDTO.
   * @param actual the RequirementRefDTO we want to make assertions on.
   */
  public RequirementRefDTOAssert(RequirementRefDTO actual) {
    super(actual, RequirementRefDTOAssert.class);
  }

  /**
   * An entry point for RequirementRefDTOAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myRequirementRefDTO)</code> and get specific assertion with code completion.
   * @param actual the RequirementRefDTO we want to make assertions on.
   * @return a new <code>{@link RequirementRefDTOAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static RequirementRefDTOAssert assertThat(RequirementRefDTO actual) {
    return new RequirementRefDTOAssert(actual);
  }
}
