package org.osgi.test.assertj.dto.framework.wiring.dto;

import org.osgi.framework.wiring.dto.BundleWireDTO;
import org.osgi.test.assertj.dto.resource.dto.AbstractWireDTOAssert;

/**
 * Abstract base class for {@link BundleWireDTO} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractBundleWireDTOAssert<S extends AbstractBundleWireDTOAssert<S, A>, A extends BundleWireDTO> extends AbstractWireDTOAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractBundleWireDTOAssert}</code> to make assertions on actual BundleWireDTO.
   * @param actual the BundleWireDTO we want to make assertions on.
   */
  protected AbstractBundleWireDTOAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual BundleWireDTO's providerWiring is equal to the given one.
   * @param providerWiring the given providerWiring to compare the actual BundleWireDTO's providerWiring to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BundleWireDTO's providerWiring is not equal to the given one.
   */
  public S hasProviderWiring(int providerWiring) {
    // check that actual BundleWireDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting providerWiring of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualProviderWiring = actual.providerWiring;
    if (actualProviderWiring != providerWiring) {
      failWithMessage(assertjErrorMessage, actual, providerWiring, actualProviderWiring);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BundleWireDTO's requirerWiring is equal to the given one.
   * @param requirerWiring the given requirerWiring to compare the actual BundleWireDTO's requirerWiring to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BundleWireDTO's requirerWiring is not equal to the given one.
   */
  public S hasRequirerWiring(int requirerWiring) {
    // check that actual BundleWireDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting requirerWiring of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualRequirerWiring = actual.requirerWiring;
    if (actualRequirerWiring != requirerWiring) {
      failWithMessage(assertjErrorMessage, actual, requirerWiring, actualRequirerWiring);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
