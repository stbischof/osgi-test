package org.osgi.test.assertj.dto.service.http.runtime.dto;

import org.osgi.service.http.runtime.dto.FailedErrorPageDTO;

/**
 * {@link FailedErrorPageDTO} specific assertions - Generated by CustomAssertionGenerator.
 *
 * Although this class is not final to allow Soft assertions proxy, if you wish to extend it, 
 * extend {@link AbstractFailedErrorPageDTOAssert} instead.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class FailedErrorPageDTOAssert extends AbstractFailedErrorPageDTOAssert<FailedErrorPageDTOAssert, FailedErrorPageDTO> {

  /**
   * Creates a new <code>{@link FailedErrorPageDTOAssert}</code> to make assertions on actual FailedErrorPageDTO.
   * @param actual the FailedErrorPageDTO we want to make assertions on.
   */
  public FailedErrorPageDTOAssert(FailedErrorPageDTO actual) {
    super(actual, FailedErrorPageDTOAssert.class);
  }

  /**
   * An entry point for FailedErrorPageDTOAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myFailedErrorPageDTO)</code> and get specific assertion with code completion.
   * @param actual the FailedErrorPageDTO we want to make assertions on.
   * @return a new <code>{@link FailedErrorPageDTOAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static FailedErrorPageDTOAssert assertThat(FailedErrorPageDTO actual) {
    return new FailedErrorPageDTOAssert(actual);
  }
}
