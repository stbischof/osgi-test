package org.osgi.test.assertj.dto.service.http.runtime.dto;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.api.Assertions;
import org.assertj.core.util.Objects;
import org.osgi.service.http.runtime.dto.FilterDTO;
import org.osgi.service.http.runtime.dto.RequestInfoDTO;
import org.osgi.service.http.runtime.dto.ResourceDTO;
import org.osgi.service.http.runtime.dto.ServletDTO;

/**
 * Abstract base class for {@link RequestInfoDTO} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractRequestInfoDTOAssert<S extends AbstractRequestInfoDTOAssert<S, A>, A extends RequestInfoDTO> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractRequestInfoDTOAssert}</code> to make assertions on actual RequestInfoDTO.
   * @param actual the RequestInfoDTO we want to make assertions on.
   */
  protected AbstractRequestInfoDTOAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual RequestInfoDTO's filterDTOs contains the given FilterDTO elements.
   * @param filterDTOs the given elements that should be contained in actual RequestInfoDTO's filterDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual RequestInfoDTO's filterDTOs does not contain all given FilterDTO elements.
   */
  public S hasFilterDTOs(FilterDTO... filterDTOs) {
    // check that actual RequestInfoDTO we want to make assertions on is not null.
    isNotNull();

    // check that given FilterDTO varargs is not null.
    if (filterDTOs == null) failWithMessage("Expecting filterDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.filterDTOs).contains(filterDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RequestInfoDTO's filterDTOs contains <b>only</b> the given FilterDTO elements and nothing else in whatever order.
   *
   * @param filterDTOs the given elements that should be contained in actual RequestInfoDTO's filterDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual RequestInfoDTO's filterDTOs does not contain all given FilterDTO elements and nothing else.
   */
  public S hasOnlyFilterDTOs(FilterDTO... filterDTOs) {
    // check that actual RequestInfoDTO we want to make assertions on is not null.
    isNotNull();

    // check that given FilterDTO varargs is not null.
    if (filterDTOs == null) failWithMessage("Expecting filterDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.filterDTOs).containsOnly(filterDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RequestInfoDTO's filterDTOs does not contain the given FilterDTO elements.
   *
   * @param filterDTOs the given elements that should not be in actual RequestInfoDTO's filterDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual RequestInfoDTO's filterDTOs contains any given FilterDTO elements.
   */
  public S doesNotHaveFilterDTOs(FilterDTO... filterDTOs) {
    // check that actual RequestInfoDTO we want to make assertions on is not null.
    isNotNull();

    // check that given FilterDTO varargs is not null.
    if (filterDTOs == null) failWithMessage("Expecting filterDTOs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.filterDTOs).doesNotContain(filterDTOs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RequestInfoDTO has no filterDTOs.
   * @return this assertion object.
   * @throws AssertionError if the actual RequestInfoDTO's filterDTOs is not empty.
   */
  public S hasNoFilterDTOs() {
    // check that actual RequestInfoDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have filterDTOs but had :\n  <%s>";

    // check that it is not empty
    if (actual.filterDTOs.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.filterDTOs));
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual RequestInfoDTO's path is equal to the given one.
   * @param path the given path to compare the actual RequestInfoDTO's path to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RequestInfoDTO's path is not equal to the given one.
   */
  public S hasPath(String path) {
    // check that actual RequestInfoDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting path of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualPath = actual.path;
    if (!Objects.areEqual(actualPath, path)) {
      failWithMessage(assertjErrorMessage, actual, path, actualPath);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RequestInfoDTO's resourceDTO is equal to the given one.
   * @param resourceDTO the given resourceDTO to compare the actual RequestInfoDTO's resourceDTO to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RequestInfoDTO's resourceDTO is not equal to the given one.
   */
  public S hasResourceDTO(ResourceDTO resourceDTO) {
    // check that actual RequestInfoDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting resourceDTO of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    ResourceDTO actualResourceDTO = actual.resourceDTO;
    if (!Objects.areEqual(actualResourceDTO, resourceDTO)) {
      failWithMessage(assertjErrorMessage, actual, resourceDTO, actualResourceDTO);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RequestInfoDTO's servletContextId is equal to the given one.
   * @param servletContextId the given servletContextId to compare the actual RequestInfoDTO's servletContextId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RequestInfoDTO's servletContextId is not equal to the given one.
   */
  public S hasServletContextId(long servletContextId) {
    // check that actual RequestInfoDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting servletContextId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    long actualServletContextId = actual.servletContextId;
    if (actualServletContextId != servletContextId) {
      failWithMessage(assertjErrorMessage, actual, servletContextId, actualServletContextId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RequestInfoDTO's servletDTO is equal to the given one.
   * @param servletDTO the given servletDTO to compare the actual RequestInfoDTO's servletDTO to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RequestInfoDTO's servletDTO is not equal to the given one.
   */
  public S hasServletDTO(ServletDTO servletDTO) {
    // check that actual RequestInfoDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting servletDTO of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    ServletDTO actualServletDTO = actual.servletDTO;
    if (!Objects.areEqual(actualServletDTO, servletDTO)) {
      failWithMessage(assertjErrorMessage, actual, servletDTO, actualServletDTO);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
