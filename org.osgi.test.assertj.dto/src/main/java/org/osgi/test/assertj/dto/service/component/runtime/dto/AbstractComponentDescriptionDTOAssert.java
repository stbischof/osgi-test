package org.osgi.test.assertj.dto.service.component.runtime.dto;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.api.Assertions;
import org.assertj.core.util.Objects;
import org.osgi.service.component.runtime.dto.ComponentDescriptionDTO;
import org.osgi.service.component.runtime.dto.ReferenceDTO;

/**
 * Abstract base class for {@link ComponentDescriptionDTO} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractComponentDescriptionDTOAssert<S extends AbstractComponentDescriptionDTOAssert<S, A>, A extends ComponentDescriptionDTO> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractComponentDescriptionDTOAssert}</code> to make assertions on actual ComponentDescriptionDTO.
   * @param actual the ComponentDescriptionDTO we want to make assertions on.
   */
  protected AbstractComponentDescriptionDTOAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual ComponentDescriptionDTO's activate is equal to the given one.
   * @param activate the given activate to compare the actual ComponentDescriptionDTO's activate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ComponentDescriptionDTO's activate is not equal to the given one.
   */
  public S hasActivate(String activate) {
    // check that actual ComponentDescriptionDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting activate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualActivate = actual.activate;
    if (!Objects.areEqual(actualActivate, activate)) {
      failWithMessage(assertjErrorMessage, actual, activate, actualActivate);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ComponentDescriptionDTO's bundle is equal to the given one.
   * @param bundle the given bundle to compare the actual ComponentDescriptionDTO's bundle to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ComponentDescriptionDTO's bundle is not equal to the given one.
   */
  public S hasBundle(org.osgi.framework.dto.BundleDTO bundle) {
    // check that actual ComponentDescriptionDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting bundle of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.osgi.framework.dto.BundleDTO actualBundle = actual.bundle;
    if (!Objects.areEqual(actualBundle, bundle)) {
      failWithMessage(assertjErrorMessage, actual, bundle, actualBundle);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ComponentDescriptionDTO's configurationPid contains the given String elements.
   * @param configurationPid the given elements that should be contained in actual ComponentDescriptionDTO's configurationPid.
   * @return this assertion object.
   * @throws AssertionError if the actual ComponentDescriptionDTO's configurationPid does not contain all given String elements.
   */
  public S hasConfigurationPid(String... configurationPid) {
    // check that actual ComponentDescriptionDTO we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (configurationPid == null) failWithMessage("Expecting configurationPid parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.configurationPid).contains(configurationPid);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ComponentDescriptionDTO's configurationPid contains <b>only</b> the given String elements and nothing else in whatever order.
   *
   * @param configurationPid the given elements that should be contained in actual ComponentDescriptionDTO's configurationPid.
   * @return this assertion object.
   * @throws AssertionError if the actual ComponentDescriptionDTO's configurationPid does not contain all given String elements and nothing else.
   */
  public S hasOnlyConfigurationPid(String... configurationPid) {
    // check that actual ComponentDescriptionDTO we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (configurationPid == null) failWithMessage("Expecting configurationPid parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.configurationPid).containsOnly(configurationPid);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ComponentDescriptionDTO's configurationPid does not contain the given String elements.
   *
   * @param configurationPid the given elements that should not be in actual ComponentDescriptionDTO's configurationPid.
   * @return this assertion object.
   * @throws AssertionError if the actual ComponentDescriptionDTO's configurationPid contains any given String elements.
   */
  public S doesNotHaveConfigurationPid(String... configurationPid) {
    // check that actual ComponentDescriptionDTO we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (configurationPid == null) failWithMessage("Expecting configurationPid parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.configurationPid).doesNotContain(configurationPid);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ComponentDescriptionDTO has no configurationPid.
   * @return this assertion object.
   * @throws AssertionError if the actual ComponentDescriptionDTO's configurationPid is not empty.
   */
  public S hasNoConfigurationPid() {
    // check that actual ComponentDescriptionDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have configurationPid but had :\n  <%s>";

    // check that it is not empty
    if (actual.configurationPid.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.configurationPid));
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual ComponentDescriptionDTO's configurationPolicy is equal to the given one.
   * @param configurationPolicy the given configurationPolicy to compare the actual ComponentDescriptionDTO's configurationPolicy to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ComponentDescriptionDTO's configurationPolicy is not equal to the given one.
   */
  public S hasConfigurationPolicy(String configurationPolicy) {
    // check that actual ComponentDescriptionDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting configurationPolicy of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualConfigurationPolicy = actual.configurationPolicy;
    if (!Objects.areEqual(actualConfigurationPolicy, configurationPolicy)) {
      failWithMessage(assertjErrorMessage, actual, configurationPolicy, actualConfigurationPolicy);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ComponentDescriptionDTO's deactivate is equal to the given one.
   * @param deactivate the given deactivate to compare the actual ComponentDescriptionDTO's deactivate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ComponentDescriptionDTO's deactivate is not equal to the given one.
   */
  public S hasDeactivate(String deactivate) {
    // check that actual ComponentDescriptionDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting deactivate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualDeactivate = actual.deactivate;
    if (!Objects.areEqual(actualDeactivate, deactivate)) {
      failWithMessage(assertjErrorMessage, actual, deactivate, actualDeactivate);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ComponentDescriptionDTO is defaultEnabled.
   * @return this assertion object.
   * @throws AssertionError - if the actual ComponentDescriptionDTO is not defaultEnabled.
   */
  public S isDefaultEnabled() {
    // check that actual ComponentDescriptionDTO we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.defaultEnabled) {
      failWithMessage("\nExpecting that actual ComponentDescriptionDTO is defaultEnabled but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ComponentDescriptionDTO is not defaultEnabled.
   * @return this assertion object.
   * @throws AssertionError - if the actual ComponentDescriptionDTO is defaultEnabled.
   */
  public S isNotDefaultEnabled() {
    // check that actual ComponentDescriptionDTO we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.defaultEnabled) {
      failWithMessage("\nExpecting that actual ComponentDescriptionDTO is not defaultEnabled but is.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ComponentDescriptionDTO's factory is equal to the given one.
   * @param factory the given factory to compare the actual ComponentDescriptionDTO's factory to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ComponentDescriptionDTO's factory is not equal to the given one.
   */
  public S hasFactory(String factory) {
    // check that actual ComponentDescriptionDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting factory of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualFactory = actual.factory;
    if (!Objects.areEqual(actualFactory, factory)) {
      failWithMessage(assertjErrorMessage, actual, factory, actualFactory);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ComponentDescriptionDTO is immediate.
   * @return this assertion object.
   * @throws AssertionError - if the actual ComponentDescriptionDTO is not immediate.
   */
  public S isImmediate() {
    // check that actual ComponentDescriptionDTO we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.immediate) {
      failWithMessage("\nExpecting that actual ComponentDescriptionDTO is immediate but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ComponentDescriptionDTO is not immediate.
   * @return this assertion object.
   * @throws AssertionError - if the actual ComponentDescriptionDTO is immediate.
   */
  public S isNotImmediate() {
    // check that actual ComponentDescriptionDTO we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.immediate) {
      failWithMessage("\nExpecting that actual ComponentDescriptionDTO is not immediate but is.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ComponentDescriptionDTO's implementationClass is equal to the given one.
   * @param implementationClass the given implementationClass to compare the actual ComponentDescriptionDTO's implementationClass to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ComponentDescriptionDTO's implementationClass is not equal to the given one.
   */
  public S hasImplementationClass(String implementationClass) {
    // check that actual ComponentDescriptionDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting implementationClass of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualImplementationClass = actual.implementationClass;
    if (!Objects.areEqual(actualImplementationClass, implementationClass)) {
      failWithMessage(assertjErrorMessage, actual, implementationClass, actualImplementationClass);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ComponentDescriptionDTO's modified is equal to the given one.
   * @param modified the given modified to compare the actual ComponentDescriptionDTO's modified to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ComponentDescriptionDTO's modified is not equal to the given one.
   */
  public S hasModified(String modified) {
    // check that actual ComponentDescriptionDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting modified of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualModified = actual.modified;
    if (!Objects.areEqual(actualModified, modified)) {
      failWithMessage(assertjErrorMessage, actual, modified, actualModified);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ComponentDescriptionDTO's name is equal to the given one.
   * @param name the given name to compare the actual ComponentDescriptionDTO's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ComponentDescriptionDTO's name is not equal to the given one.
   */
  public S hasName(String name) {
    // check that actual ComponentDescriptionDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualName = actual.name;
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ComponentDescriptionDTO's properties is equal to the given one.
   * @param properties the given properties to compare the actual ComponentDescriptionDTO's properties to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ComponentDescriptionDTO's properties is not equal to the given one.
   */
  public S hasProperties(java.util.Map properties) {
    // check that actual ComponentDescriptionDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting properties of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Map actualProperties = actual.properties;
    if (!Objects.areEqual(actualProperties, properties)) {
      failWithMessage(assertjErrorMessage, actual, properties, actualProperties);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ComponentDescriptionDTO's references contains the given ReferenceDTO elements.
   * @param references the given elements that should be contained in actual ComponentDescriptionDTO's references.
   * @return this assertion object.
   * @throws AssertionError if the actual ComponentDescriptionDTO's references does not contain all given ReferenceDTO elements.
   */
  public S hasReferences(ReferenceDTO... references) {
    // check that actual ComponentDescriptionDTO we want to make assertions on is not null.
    isNotNull();

    // check that given ReferenceDTO varargs is not null.
    if (references == null) failWithMessage("Expecting references parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.references).contains(references);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ComponentDescriptionDTO's references contains <b>only</b> the given ReferenceDTO elements and nothing else in whatever order.
   *
   * @param references the given elements that should be contained in actual ComponentDescriptionDTO's references.
   * @return this assertion object.
   * @throws AssertionError if the actual ComponentDescriptionDTO's references does not contain all given ReferenceDTO elements and nothing else.
   */
  public S hasOnlyReferences(ReferenceDTO... references) {
    // check that actual ComponentDescriptionDTO we want to make assertions on is not null.
    isNotNull();

    // check that given ReferenceDTO varargs is not null.
    if (references == null) failWithMessage("Expecting references parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.references).containsOnly(references);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ComponentDescriptionDTO's references does not contain the given ReferenceDTO elements.
   *
   * @param references the given elements that should not be in actual ComponentDescriptionDTO's references.
   * @return this assertion object.
   * @throws AssertionError if the actual ComponentDescriptionDTO's references contains any given ReferenceDTO elements.
   */
  public S doesNotHaveReferences(ReferenceDTO... references) {
    // check that actual ComponentDescriptionDTO we want to make assertions on is not null.
    isNotNull();

    // check that given ReferenceDTO varargs is not null.
    if (references == null) failWithMessage("Expecting references parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.references).doesNotContain(references);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ComponentDescriptionDTO has no references.
   * @return this assertion object.
   * @throws AssertionError if the actual ComponentDescriptionDTO's references is not empty.
   */
  public S hasNoReferences() {
    // check that actual ComponentDescriptionDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have references but had :\n  <%s>";

    // check that it is not empty
    if (actual.references.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.references));
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual ComponentDescriptionDTO's scope is equal to the given one.
   * @param scope the given scope to compare the actual ComponentDescriptionDTO's scope to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ComponentDescriptionDTO's scope is not equal to the given one.
   */
  public S hasScope(String scope) {
    // check that actual ComponentDescriptionDTO we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting scope of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualScope = actual.scope;
    if (!Objects.areEqual(actualScope, scope)) {
      failWithMessage(assertjErrorMessage, actual, scope, actualScope);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ComponentDescriptionDTO's serviceInterfaces contains the given String elements.
   * @param serviceInterfaces the given elements that should be contained in actual ComponentDescriptionDTO's serviceInterfaces.
   * @return this assertion object.
   * @throws AssertionError if the actual ComponentDescriptionDTO's serviceInterfaces does not contain all given String elements.
   */
  public S hasServiceInterfaces(String... serviceInterfaces) {
    // check that actual ComponentDescriptionDTO we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (serviceInterfaces == null) failWithMessage("Expecting serviceInterfaces parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.serviceInterfaces).contains(serviceInterfaces);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ComponentDescriptionDTO's serviceInterfaces contains <b>only</b> the given String elements and nothing else in whatever order.
   *
   * @param serviceInterfaces the given elements that should be contained in actual ComponentDescriptionDTO's serviceInterfaces.
   * @return this assertion object.
   * @throws AssertionError if the actual ComponentDescriptionDTO's serviceInterfaces does not contain all given String elements and nothing else.
   */
  public S hasOnlyServiceInterfaces(String... serviceInterfaces) {
    // check that actual ComponentDescriptionDTO we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (serviceInterfaces == null) failWithMessage("Expecting serviceInterfaces parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.serviceInterfaces).containsOnly(serviceInterfaces);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ComponentDescriptionDTO's serviceInterfaces does not contain the given String elements.
   *
   * @param serviceInterfaces the given elements that should not be in actual ComponentDescriptionDTO's serviceInterfaces.
   * @return this assertion object.
   * @throws AssertionError if the actual ComponentDescriptionDTO's serviceInterfaces contains any given String elements.
   */
  public S doesNotHaveServiceInterfaces(String... serviceInterfaces) {
    // check that actual ComponentDescriptionDTO we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (serviceInterfaces == null) failWithMessage("Expecting serviceInterfaces parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.serviceInterfaces).doesNotContain(serviceInterfaces);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ComponentDescriptionDTO has no serviceInterfaces.
   * @return this assertion object.
   * @throws AssertionError if the actual ComponentDescriptionDTO's serviceInterfaces is not empty.
   */
  public S hasNoServiceInterfaces() {
    // check that actual ComponentDescriptionDTO we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have serviceInterfaces but had :\n  <%s>";

    // check that it is not empty
    if (actual.serviceInterfaces.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.serviceInterfaces));
    }

    // return the current assertion for method chaining
    return myself;
  }


}
